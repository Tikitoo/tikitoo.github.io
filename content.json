{"meta":{"title":"Tikitoo Blog","subtitle":null,"description":"Android 开发工程师，互联网爱好者。","author":"Tikitoo","url":"http://tikitoo.github.io"},"pages":[{"title":"about","date":"2015-07-01T03:05:04.000Z","updated":"2016-06-19T14:53:58.000Z","comments":true,"path":"about/index.html","permalink":"http://tikitoo.github.io/about/index.html","excerpt":"","text":"常用id，Tikitoo 和安卓同学，Android 开发者和互联网爱好者。 2012 年 - 2014 年，就读于郑州轻工业学院软件学院。 2014 年毕业，在一家外包公司做JavaEE 开发。 2014 年底辞职，开始自学Android。 2015 年 3月 - 6月，就职于琥珀天气，从事Android 实习。 2015 年 8月 - 2016 年6 月，绿葡科技，从事Android 开发。 2016 年6 月 - 至今，造作科技，从事Android 开发。 更多我的信息： Github：https://github.com/Tikitoo/ 知乎：http://www.zhihu.com/people/tikitoo 微博：http://weibo.com/lyf0306 简书：http://www.jianshu.com/users/c35153600475 个人微信：Tikitoo 微信公众号：安卓同学 邮箱：codes0306 at gmail.com（at 换成@） 我的简历 我的简历"},{"title":"categories","date":"2015-07-01T03:06:22.000Z","updated":"2015-07-01T03:06:56.000Z","comments":false,"path":"categories/index.html","permalink":"http://tikitoo.github.io/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2016-01-20T12:49:36.000Z","updated":"2016-01-20T14:39:24.000Z","comments":true,"path":"friends/index.html","permalink":"http://tikitoo.github.io/friends/index.html","excerpt":"","text":"我的朋友们： Qi Tang’s Blog poberWong 程序亦非猿 杨辉的个人博客 卢俊 | 移动互联网|Android 加友链？请联系我：关于我"},{"title":"资源","date":"2015-10-20T15:25:26.000Z","updated":"2015-10-20T15:27:24.000Z","comments":true,"path":"recommend/index.html","permalink":"http://tikitoo.github.io/recommend/index.html","excerpt":"","text":"我从去年（2014）开始写博客，记录东西，先后在简书，个人博客，Medium 都写过一些东西，现在觉得，愈发喜欢习作了，不仅仅是技术的东西，而且关于自己对互联网，对生活的理解，我想都应该记录下来，一方面是对自己的总结，二来也能看到自己过去和现在的改变。当然了，如果自己写的东西能帮助到别人，这也是我所欣慰的。因为在技术圈，在互联网圈，大多数人是愿意分享的，正是他们的无私分享，才是我们学习技术，了解其他事物更加便捷，容易。正因为我们从中获益，所以我们应该传承分享的精神。 关于我会写哪些东西？ 作为一个Android 开发工程师，我会分享Android 开发相关的技术内容。 作为一个互联网爱好者，我也会写我对互联网的互联网的看法和我认同的观点。 作为一个热爱阅读，写作，我会把读到的好东西分享给大家，也会分享自己心得的笔记。 我觉得一个人对事物的认知是有限的，我们从输入到输出是需要一个阶段的。 输入对与新人来说辨别事物的能力是有限的，我希望自己传播的东西至少是自己仔细思考过的。我们从外界吸收知识，然而现在的互联网的世界，我们获取只是途径太多，比如微博，知乎，简书，看各种博客，读书等等，然而碎片化的知识太多，我们不能及时来吸收，我们可以保存书签，Evernote，Pocket，Kindle 上来读，然后每周或者定时来整理自己最吸取或者来收藏的东西，这样才不会落于俗套。 输出当我们的知识积累到一定的程度，就有了输出的价值，这是我们写的东西就应该更加严谨，至少来说没有歧义，不能误导别人，只是我们向别人输出信息应该注意的。 最后，在我们的知识范围内，我希望我向别人传达的东西，不管是刚入门的新人，还是对有经验的人都是是有益的，而不是写的东西给人一种高冷的感觉。"},{"title":"资源","date":"2015-10-20T15:33:13.000Z","updated":"2015-10-20T15:57:32.000Z","comments":true,"path":"resources/index.html","permalink":"http://tikitoo.github.io/resources/index.html","excerpt":"","text":"我推荐的好资源 Android 博客推荐 duguguiyu - 博客园 stormzhang 的博客 代码家 Trinea http://hukai.me/ 方杰 张兴业的博客 - 博客频道 - CSDN.NET 任玉刚 - 博客频道 - CSDN.NET Android_Tutor的专栏 - 博客频道 - CSDN.NET hellogv的专栏 - 博客频道 - CSDN.NET 郭霖的专栏 - 博客频道 - CSDN.NET 鸿洋_ - 博客频道 - CSDN.NET xiaanming - 博客频道 - CSDN.NET 任玉刚 - 博客频道 - CSDN.NET 安卓开发 -胡凯 泡在网上的日子 lightSky‘Blog 技术小黑屋 程序亦非猿 - 简书 asce1885 - 简书 liangfeizc Mr.Simple的专栏 - 博客频道 - CSDN.NET Hongyang - 博客频道 - CSDN.NET codeKK 开源项目源码分析 大头鬼Bruce - 博客频道 - CSDN.NET Android Performance 脉脉不得语的技术博客 码农明明桑 Innost的专栏 - 博客频道 - CSDN.NET ChenQichao’s Blog Yet Another Summer Rain | Yet Another Summer Rain 对影成三人 - 51CTO技术博客 - 领先的IT技术博客 别人的推荐 推荐 | Drakeet的个人博客 Android;开源库;开源；安卓学习 android-cn/android-dev-com android-cn/android-dev-cn Android 开源App drakeet/Meizhi妹纸.gank.io daimajia/EverMemoEverMemo 是一个Evernote 的笔记App。 stormzhang/9GAG一个9GAG 的非官方客户端。 drakeet/Seashell-app贝壳单词 APP Android 客户端。 eoecn/android-appeoe的Android客户端源码。 vmihalachi/turbo-editorturbo-editor 一个开源的文本编辑器。 这个太多了，以后慢慢补充吧。 技术类网站 CSDN全球最大中文IT社区，为IT专业技术人员提供最全面的信息传播和服务平台。 51CTO技术成就梦想 - 中国领先的IT技术网站 itEyeJava编程 Spring框架 Ajax技术 agile敏捷软件开发 ruby on rails实践 - 做最棒的软件开发交流社区。 cnBlogs博客园是面向程序员的知识学习与分享社区。 BlogJava专注于Java技术。 BlogRead专业IT技术博客。 ChinaUnix专业IT技术博客 GithubBuild software better, together. OSCHINA（oschina）找到您想要的开源项目，分享和交流 ITPUB(itpub)专业IT技术博客 并发编程网 - ifeve.com阿里一小撮工程师分享的关于Java 方面的技术。 伯乐在线投递和发现优秀原创的最佳聚合站点之一 ImportNew专注Java &amp; Android 技术分享 Segmentfault年轻开发者社区；最前沿的技术问答，最纯粹的技术切磋。 InfoQInfoQ - 促进软件开发领域知识与创新的传播 V2EXV2EX 是创意工作者们的社区。这里目前汇聚了超过 75000 名主要来自互联网行业、游戏行业和媒体行业的创意工作 大牛的博客 当然我在扯淡 - 王垠王垠的博客，你看到是一个技术人独立的思考，他写的文章，针针见血，很值得一读。 首页 - 廖雪峰的官方网站廖雪峰的JS，Python，Git 教程，都可以当作入门者来学习。 阮一峰的网络日志阮一峰算是国内写技术博客比较早的了，至今还一直坚持写技术文章，不得不让人佩服呀。他写的文章Web 比较多，其他方面也有涉及。他翻译的《黑客与画家》，他的文集《如何变得有思想》都是值得读的。 刘未鹏 | Mind Hacks | 思维改变生活刘未鹏的博客涉及挺广的，不仅仅在编程方面，还有学习方法，思维方面对我们的建议。 四火的唠叨四火的文章，写的很好的技术文章，还有对程序员这个行业的思考。 酷壳 – CoolShell.cn感觉陈皓的文章，对于初学者还是有难度的，但是随着技术的进步你会越发喜欢。 DBA Notes | 闲思录 - 创业感悟 网站架构 性能优化 技术评论冯大辉在国内技术圈算是比较有影响力的，从阿里巴巴加入丁香园的做CTO，他的博客对创业和技术都有自己独特的见解。在互联网圈，他是一个敢做敢说的人。他的小道消息也非常不错。 robbin的肉饼铺子 - 知乎专栏robbin 的博客好像打不开了，只有贴上他的专栏了。 deepinmind的技术博客 - Java译站Deepinmind，花名有孚，支付宝工程师。他的文章大都是翻译国外的文章，而且更新的很频繁，如果你是一个Java 或者Android 程序员，他的博客是非常值得读的。 lifesinger 玉伯玉伯是支付宝的前端Team Leader。 MacTalk-池建强的随想录 | 关注技术和人文池建强，在国内普及Mac 知识的人，现在加入了锤子。 Tinyfool的Blog郝培强，一样是苹果迷，也有对技术人员的思考。活跃于微博。 月光博客-关注互联网和搜索引擎的IT科技博客[月光博客，不管是国外，国内的博客，互联网相关的新闻消息，在这里几乎都有。 日报/周刊 Android Weekly Android Weekly 是由Android 团队的成员和国外知名的Android 开发者维护，分享的内容不仅仅只有干货，而且还有最新的技术分享，也是Android 开发圈子最早，最有名的周报。如果想看中文版，请移步知乎专栏——《Android Weekly - 知乎专栏》. Android开发技术周报Android开发技术周报是由@脉脉不嘚語 维护更新，截止到现在，已经发布了28 期，分享的都是高质量的文章教程，代码库，工具，新闻视频，设计等。 Android 科学院由@duguguiyu 和豌豆荚一小撮工程师组成，分享的都是最新的Android 技术；虽然更新频率不是很高，但是质量确是很很高的，值得一看的。 开发技术前线开发技术前线是一个高质量技术文章的聚合网站，主要分享Android，iOS，以及招聘等内容。 App开发日报App开发日报主要关注移动应用的开发，它每天一刊，分享的内容主要来自微博上知名的开发者推荐的内容，因此质量基本上是有保证的。 Android开发周报Android开发周报是郭亮在连载更新在Infoq 的周刊，它不仅分享Android 的相关新闻，新工具，而且还有更加深入的，所以对于新生老人都很适合。 ANDROID 周报 Startup News 开发者头条 - 开发者的首选阅读分享平台 头条 - 伯乐在线 湾区日报：关注创业与技术，每天推送5篇优质英文文章 稀土掘金 干货集中营 往期回顾_码农周刊"},{"title":"tags","date":"2015-07-01T03:03:11.000Z","updated":"2015-07-01T03:03:46.000Z","comments":false,"path":"tags/index.html","permalink":"http://tikitoo.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Blog article name","slug":"Blog-article-name","date":"2017-11-25T16:22:29.000Z","updated":"2017-11-25T16:22:29.000Z","comments":true,"path":"2017/11/26/Blog-article-name/","link":"","permalink":"http://tikitoo.github.io/2017/11/26/Blog-article-name/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"在Android Studio 中使用Git","slug":"android-studio-use-git","date":"2017-07-06T00:43:30.000Z","updated":"2017-07-06T00:37:52.000Z","comments":true,"path":"2017/07/06/android-studio-use-git/","link":"","permalink":"http://tikitoo.github.io/2017/07/06/android-studio-use-git/","excerpt":"","text":"我们都知道Git，现在基本上标配的代码管理工具，它的诸多优点也让它脱颖而出，我们工作中也大都使用Git。 但是我们使用Android Studio 来开发App，一般我们会使用命令行来Push（提交），Pull（更新），Merge（合并）代码，这样来回切换，觉得非常不方便。 如果我们直接能在Android Studio 上直接执行上面的一系列操作，肯定会提高很多效率。所以这篇文章，就是使用Android Studio 如何执行一系列的Git 功能。 配置Git当然虽然IDE 集成了，但是也脱离不了Git 原生的工具，所以首先要安装Git，大家可以参考下面的链接，可以切换成中文，Win，Mac，Linux 都有对应的安装方式，大家对号入座。 Git - Installing Git 安装之后，就需要在Android Studio 中配置了。添加Git 仓库，如果没有远程仓库，需要自己使用命令行添加。 1git remote set-url origin https://github.com/Tikitoo/Android-PickerView.git 第一次添加的项目，需要在这里配置一下，表示它是Git 项目，Android Studio 才会识别。 忽略文件但是提交代码前，我们要注意一下忽略文件—— .gitignore ，这个如果没有添加。Android Studio 有个插件叫—— ignore ，可以去搜索安装，安装之后，在顶级目录，右键—&gt; New —&gt; ignore file —&gt; .gitignore file，还可以选择不同的语言和框架，我们选择Android 就行了。就会自动生成，它会自动添加一些不必要提交服务器的文件，比如apk，build/ 等等。如果没有添加 .gitignore 文件，所有文件将都将会提交，如果再添加 .gitignore ，则会报错，你需要在，设置中 —&gt; Version Control 将初始化的Git 目录移除，然后需要上个步骤再配置一下就好了。一定要注意要先添加忽略文件。 提交代码经过了一些列的配置，我们就可以来提交代码了。我们都知道使用Git，需要经过一系列的Add，Commit，Push。Android 中可以可以通过两种方式来提交代码。 文件夹形式 通过文件夹，右键 Git —&gt; Commit Directory。通过文件夹的形式直接提交代码，这个时候一定要注意自己所在的目录，以免不在顶级目录，而少提交了文件。我比较喜欢通过文件夹的形式，这样写完代码，文件夹目录更加熟悉，就可以直接提交了。 菜单栏通过顶部菜单栏，VCS —&gt; Git —&gt; Commit Directory，就可以执行一系列操作了。菜单栏，一提交就是全部文件。 需要注意的是，当有的文件没有Add，直接Commit，它也会显示出来，只是默认不勾选，勾选一下就相当于Add 了。这里有一个比较黑科技功能，反正我是经常使用。 Review Code 功能在这个菜单栏，双击文件，就会进入代码对比的页面，看下下图。左边的上下箭头 ，可以跳转到下一处不同。右边 显示当前文件差异的次数。左右两栏，分别显示 当前的本地的代码 和 服务器的代码 ；当有冲突，就会变成三栏，你还可以手动来合并代码，很实用。当我们写完一个功能，使用这个方法尤其好用，可以很清晰地看出哪些代码没有，或者不合理的数据，亦或者是测试数据，就可以修改完在提交，以免对其他开发和测试造成影响，也是对自己的代码负责。 分支切换分支切换，显示在 右下角 的工具栏。它会显示本地分支和远程分支，你可以随意切换，创建新的分支，当你Push，它会默认给服务器创建对应的分支。它还有 分支对比 功能，它可以对比不同的分支不同的代码。还有 一键Merge，Rebase，删除 功能。 Version ControlLocal Change ：本地 修改/ 添加 / 删除 的文件。Log ：这个窗口是可以查看提交记录，你还可以过滤分支，团队的不同用户，日期，以及文件夹。Console ：这个会显示你执行操作的Git 命令。当然每次更新代码，它也会显示更新修改的文件。 最后当然使用命令行，第三方的Git 客户端，亦或者使用Android Studio 集成的Git，没有孰好孰坏，在这里只是给大家提供一个选择的方式，当然也与不同人的习惯有关，仅此而已。而我自己的感受是，IDE 的便利让我的效率提升了许多，它只会在你原有的基础上有了提升。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://tikitoo.github.io/tags/Android/"},{"name":"Android Studio","slug":"Android-Studio","permalink":"http://tikitoo.github.io/tags/Android-Studio/"}]},{"title":"最近的思考","slug":"recent-thinking-about-me","date":"2017-07-02T06:51:11.000Z","updated":"2017-07-02T06:57:21.000Z","comments":true,"path":"2017/07/02/recent-thinking-about-me/","link":"","permalink":"http://tikitoo.github.io/2017/07/02/recent-thinking-about-me/","excerpt":"","text":"最近的思考从去年（2016）六月到今年（2017）六月，大概有一年的时间，都没有写技术文章了。其中有很多原因，也有很多无奈，也感觉离技术越来越远了。之前年中立下了 很多目标 ，也几乎都没有完成。所以今天写下这篇文章，希望能提醒警惕自己，希望下半年能够再次走入正道，不忘初心，继续深耕技术。 加入新公司去年下半年加入了 造作 ，也是从0 到1 把Android App 上线，跟着Leader，也算是学到很多东西，也自己独立负责了一些模块。在代码上，Leader 也算是把关比较严，一直给我们一些代码上的建议，一些问题，或者代码上的习惯，获益匪浅。从开始到现在，独立负责单品详细页，账户模块，晒单模块，还有最近的改版，还有平常的需求。刚开始有三个人来写Android，其他两个都是Android，iOS 都写，后来就剩我和Leader 来写，他主要负责整体架构，发版，也写业务。现在业务主要都是我来写，下半年是业务比较繁忙的，各种活动，促销。 工具类公众号也是去年刚开了一个公众号：高效率工具搜罗（ID：gongnu006）。不得不说啊，一般一周三篇文章，整天选题，有时候也要熬夜写稿，要平常留意各种工具，真的和很消耗时间，费神费心。也接了一些广告，公众号是工具类的，没有太多鸡汤味道的，所以很难让粉丝来买单，开了个小密圈，加入的也是寥寥数几，只能靠接广告来实现商业化。业余很多时间都花费在这上面了，周末也要写文章，所以在这上面花费了很多时间，技术上难免就就花费时间比较少了。 生活生活上，也没有刚毕业的时候的那种压力，所以也就堕落了起来，也没有刚学习Android 那种劲头。自己也是一个没有太大抱负的人，也不是那种自律的人。今年也谈了女朋友，异地恋，下班就开始聊天，一直到睡觉，如胶似漆。 所以综上所述，导致在技术的道路上偏离的越来越远了。这不是我所希望的，做Android 两年也一直在很初级的工作，发展也有一些瓶颈。","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"http://tikitoo.github.io/tags/生活/"},{"name":"Android","slug":"Android","permalink":"http://tikitoo.github.io/tags/Android/"}]},{"title":"关于Toast 的使用问题","slug":"about-toast-use-problem","date":"2017-03-15T13:05:00.000Z","updated":"2017-07-02T07:15:09.000Z","comments":true,"path":"2017/03/15/about-toast-use-problem/","link":"","permalink":"http://tikitoo.github.io/2017/03/15/about-toast-use-problem/","excerpt":"","text":"系统的ToastToast 是Android 系统的一个控件，我们这样就可以这样调用。Toast.makeText(context, text, duration).show(); 自定义Toas但是真正的项目中，这样并不能满足需求，所以就需要我们来自定义Toast，系统的Toast 也暴露了setView() 的函数，我们可以自定义View，这样就可以达到自定义View 的效果。下面是官方文档给出的一个Demo 添加点击事件我们聊天页面收到新消息，点击进入聊天页面，这样的需求就需要给Toast 添加点击事件。我们看源码可以知道，系统的Toast 是没有点击事件的，这就需要我们自定义一个Toast，我们只需要模仿系统的Toast 再建一个类似的Toast 即可。我们通过创建一个View，将它添加到WindowManager。并且给wm 设置LayoutParams 的各种属性，flag 属性可以设置是否可点击啊，我们设置为可点击，就可以重新创建一个属于自定义View 了。 看下面代码。 问题：之前遇到一个问题，自定义的Toast，在红米Note 3 上有时不显示，网上也有人提供了方案，但是我想到了另一个方案，利用Dialog 替代自定义Toast，当show() 的时候，给一个延迟三秒之后，然后再dismiss，也能起到Toast 的效果。 参考https://developer.android.com/guide/topics/ui/notifiers/toasts.html 用Fragment 替代Toast，它存在于Activity，并不属于Windows，按返回按钮就消失了，目前还没解决（捂脸，逃）。 如果你有其他的方法，欢迎一块讨论。这篇简短的文章，没有多少技术含量，希望能给你一点思路。我是Tikitoo，一个技术渣，在这里分享Android 开发相关的东西。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://tikitoo.github.io/tags/Android/"}]},{"title":"2016 年计划","slug":"10-great-learning-android-development-of-the-site","date":"2016-12-31T05:47:08.000Z","updated":"2016-06-21T15:39:19.000Z","comments":true,"path":"2016/12/31/10-great-learning-android-development-of-the-site/","link":"","permalink":"http://tikitoo.github.io/2016/12/31/10-great-learning-android-development-of-the-site/","excerpt":"","text":"这篇文章是要规划 2016 要学习的技术。这个想法是看到Markzhai 在他的博客中这样做的，感觉这样每次打开自己的博客都有一个提醒或者鼓励，然后让自己知道自己可以做的事情有很多，也让自己无聊的时候有事情做。 虽然现在已经六月了。 搭建项目首先是选择开源项目 Retrofit RxJava Dagger 2 Realm Glide Gradle Google Support Android 中使用的开源项目 · Issue #26 · Tikitoo/androidsamples 深入学习的开源项目下拉刷新 数据缓存 了解使用单元测试学习（小创的公众号，一个连载的书） 持续集成 React Naive Kotlin Google I/O DroidCon Android 源码FragmentTabHost RecyclerView 做一个开源App依照上面的的开源项目 目前选择的API，Medium，Github，AngleList 每周翻译一篇英语文章（从五月）好吧，这个已经间断了。因为最近换了一份工作，比较忙，住的地方离公司比较远，所以除了周末，基本上就没有时间了。 学习JavaScript 和node.js如果说要要学习一门脚本语言，我会首选JS，那么服务器就会选择node，而node 需要JS 基础的，仅此而已。 学习Swift因为有了Mac，把学习Swift 也加入了计划中了，而且新公司的项目也是采用Swift 来写的。它吸收了脚本语言和比较成熟的语言，学习一下，也会有一些新的心得。","categories":[],"tags":[{"name":"计划","slug":"计划","permalink":"http://tikitoo.github.io/tags/计划/"},{"name":"总结","slug":"总结","permalink":"http://tikitoo.github.io/tags/总结/"}]},{"title":"知道Android 中Gradle 的这些技巧，提升编译构建速度","slug":"android-studio-gradle-build-run-faster","date":"2016-05-26T00:15:41.000Z","updated":"2016-05-26T23:30:32.000Z","comments":true,"path":"2016/05/26/android-studio-gradle-build-run-faster/","link":"","permalink":"http://tikitoo.github.io/2016/05/26/android-studio-gradle-build-run-faster/","excerpt":"","text":"不过有些事情我们是不得不承认的，Android Studio 越升级越卡顿有木有，每次升级都说有黑科技，但每次都被当做小白鼠，最后只能降版本保智商，每次构建，都要刷个干货群，刷个知乎才能完成，有时候代码改了运行了没有生效有木有？？？现在越来越觉得Google 不靠谱了（这么大胆黑谷歌会不会被喷死！！！）。好吧吐槽完了，下面切入正题，最后还是要自己去填坑。 现在基本上都使用Android Studio 来开发，使用Gradle 构建项目，Gradle 的种种优点，多渠道打包方便，依赖类库统一管理，基于Groovy 的DSL 语言简洁方便。这些好处在我们开发省了我们不少事，但是唯一的问题就是编译构建运行的时候特别慢，甚至是致命的，最后发现加班的时间都浪费在编译构建上（说多了都是泪）。 下面有几个技巧，让你你的Android Gradle 运行，编译更加快速。 设置代理因为依赖要从Jcenter/Maven 仓库上下载，但是网络还是时不时地抽风。如果你使用VPN 或者全局代码可以从本地网络配置，就不需要在Android Studio 配置了（好像并没有什么用？）。给Gradle 设置代码需要在根目录的gradle.properties 配置。 12345// 举例ShadowSocketsystemProp.http.proxyHost=127.0.0.1systemProp.http.proxyPort=1080systemProp.https.proxyHost=127.0.0.1systemProp.https.proxyPort=1080 如果你用ShadowSocket，记得在本地开启。如果你使用其他代理软件，也类似，会有主机和端口。 更新Gradle，设置离线状态Android Studio 的版本一般都跟随着Gradle 的版本，在安装目录的根目录有个gradle 目录，就是最新版，我们可以在设置中打开Gradle，选择Use local gradle distribution，然后选择Gradle 的目录即可，这样就不会每次根据项目中./gradle/xxx 中的gradle 版本每次再下载。理论上Gradle 的版本越新构建运行越快，也只是理论上，所以推荐稳定版的版本。 如果需要使用命令行编译，可以配置–daemon –parallel –offline。 守护进程，并行编译在项目的根目录中有一个gradle.properties 文件， org.gradle.daemon=true 就是让你让你编译时使用守护进程。 org.gradle.parallel=true 使用并行编译 org.gradle.jvmargs=-Xmx2048m JVM最大允许分配的堆内存，按需分配 -XX:MaxPermSize=512m JVM最大允许分配的非堆内存，按需分配 当然你也可以在下面的目录下面创建gradle.properties ，来配置全局的属性，在所有的项目中起作用。 /home//.gradle/ (Linux) /Users//.gradle/ (Mac) C:\\Users\\\\.gradle (Windows) 当然也可以修改xxx\\android studio 安装目录\\bin\\studio64.exe.vmoptions 文件来配置JVM 的相关的参数。 开发使用SDK=2112345678910111213android &#123; ... productFlavors &#123; dev &#123; minSdkVersion 21 &#125; release &#123; minSdkVersion 14 &#125; &#125;&#125; 我们都知道当API 不小于21，使用 ART，在 Build 时只做 class to dex，不做 mergeing dex，会省下大量的时间。 使用aar依赖我们都知道我们或多或少使用第三方的开源库或者工具，还有自己封装的类库，但是一次编译的时候在Library Module 目录下， 打开build/outputs/aar，就有生成的aar 文件。把他放在libs 目录下，在build.gradle 添加。 123456789101112allprojects &#123; repositories &#123; jcenter() flatDir &#123; dirs 'libs' &#125; &#125;&#125;dependencies &#123; compile(name:'cards', ext:'aar')&#125; 当然也可以这样添加 我们可以新建一个jar/aar Module，选择aar 文件，然后新建的Module 目录下，就会多了个build.gradle 和xxx.aar。 12configurations.maybeCreate(\"default\")artifacts.add(\"default\", file('mylibrary-debug.aar')) 然后在我们的Module 中这样引用即可。 1compile project(':mylibrary-debug') dexOptions1classpath 'com.android.tools.build:gradle:2.0.0-alpha9' 12# Default value: -Xmx10248m -XX:MaxPermSize=256morg.gradle.jvmargs=-Xmx4g -XX:MaxPermSize=512m 123456dexOptions &#123; preDexLibraries true javaMaxHeapSize &quot;3g&quot; incremental true dexInProcess = true&#125; 这里是参考stackoverflow 上的，好像有Bug，作者本人试了Android gradle 的版本至少是2.0.0-alpha9，然后配置一些参数。这里为JVM 设置4G，给Dex 设置3G。 参考 android - To run dex in process, the Gradle daemon needs a larger heap. It currently has 910 MB | Stack Overflow How to manually include external aar package using new Gradle Android Build System | Stack Overflow 优化android studio编译效率的方法 | 开发技术前线 加速Android Studio/Gradle构建 | 码农明明桑 android - Adding local .aar files to my gradle build | Stack Overflow Android模块化编程之引用本地的aar | Stormzhang 本文译者：Tikitoo原文链接：http://tikitoo.github.io/2016/05/26/android-studio-gradle-build-run-faster/非商业转载转载请在开头注明作者详细信息和本文出处，以及本文所有内容。 本文首发我的微信公众号，分享Android 开发和互联网内容。微信号：AndroidMate公众号：安卓同学","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://tikitoo.github.io/tags/Android/"},{"name":"Android Studio","slug":"Android-Studio","permalink":"http://tikitoo.github.io/tags/Android-Studio/"},{"name":"Gradle","slug":"Gradle","permalink":"http://tikitoo.github.io/tags/Gradle/"}]},{"title":"Medium Android 客户端都使用了哪些开源项目？","slug":"medium-android-tools-zh","date":"2016-05-24T00:15:41.000Z","updated":"2016-05-23T13:52:06.000Z","comments":true,"path":"2016/05/24/medium-android-tools-zh/","link":"","permalink":"http://tikitoo.github.io/2016/05/24/medium-android-tools-zh/","excerpt":"","text":"Medium 是一个写作的平台，他的创始人也创立了Twitter，Square（JakeWharton 大神所在的公司），这篇文章是Medium 的Android工程师Daniel McCartney 分享了他们Android App 使用的开源项目。 Android Open Source Project你可以把Android 平台修改构建成你所需要的。当然你也可以提交贡献代码。 google/guavaGuava 是支持Java 6+ 的Googel 核心类库，它包括集合类，缓存，并发库，通用注解等等。 google/dagger Dagger 2 是一个快速的依赖注入库，它使用APT 的方式在编译时生成代码，在牺牲了微小代价的情况下，使项目架构更加整洁。 square/retrofit Retrofit 是一个类型安全的Rest 风格的类库，它通过注解的方式来实现网络请求。 square/okhttp OkHttp 是一个HTTP + SPDY 的网络请求库。 FasterXML/jackson Jackson 是一个Json 解析和生成库。 square/otto Otto 是一个基于Guava 项目实现的事件总线的类库。 bumptech/glide Glide 是一个图片加载和缓存库，它主要专注于平滑滚动。 square/phrase Phrase 是一个Android 字符串资源模板类库。 JakeWharton/butterknifeButterKnife 是一个View 注入类库。 chrisjenx/Calligraphy Calligraphy 是一个自定义字体的类库。 JakeWharton/hugoHugo 是一个通过注解的方法来实现日志功能的类库。 mockito/mockitoMockito 是一个Java 的Mocking 单元测试框架。 robolectric/robolectricrobolectric 是一个Android 的单元测试框架。 JakeWharton/sdk-manager-pluginsdk-manager-plugin 是用来下载和管理你的Android SDK的Gradle 插件。 下面还有很多第三方的工具，可以让你的App 大放异彩。 facebook/facebook-android-sdkfacebook-android-sdk 是集成Facebook 平台用于Android 的SDK。 FabricFabric 是Twitter 移动开发平台，它集成了一系列好用的工具，比如分析，崩溃捕获等等。 Google Services | Android Developers利用Google 最新的技术，只需要简单的API，实现很多强大的功能。 本文作者：Daniel McCartney本文译者：Tikitoo原文链接：https://medium.engineering/medium-android-tools-f827bb96b8e4翻译链接：http://tikitoo.github.io/2016/05/24/medium-android-tools-zh/非商业转载转载请在开头注明作者详细信息和本文出处，以及本文所有内容。 本文首发我的微信公众号，分享Android 开发和互联网内容。微信号：AndroidMate公众号：安卓同学","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://tikitoo.github.io/tags/Android/"},{"name":"翻译","slug":"翻译","permalink":"http://tikitoo.github.io/tags/翻译/"},{"name":"开源项目","slug":"开源项目","permalink":"http://tikitoo.github.io/tags/开源项目/"}]},{"title":"教你写一个炫酷的Material Design 风格的登录和注册页面","slug":"beautiful-android-login-and-signup-screens-with-material-design-zh","date":"2016-05-17T13:58:41.000Z","updated":"2016-05-17T13:55:20.000Z","comments":true,"path":"2016/05/17/beautiful-android-login-and-signup-screens-with-material-design-zh/","link":"","permalink":"http://tikitoo.github.io/2016/05/17/beautiful-android-login-and-signup-screens-with-material-design-zh/","excerpt":"","text":"每个人都会喜欢漂亮的登录界面，一个App 给人们的第一印象是非常重要的。 这篇文章将教你使用谷歌材料设计规范（Material design spec ）和谷歌的新的设计支持库（ design support library）来创建一个炫酷的登录和注册界面。设计支持库实现了材料设计规范的一部分，它包含了一部分炫酷的UI 部件，让你的Android 应用给人一种优雅的感觉。 对事物的设计和布局方面，如何做到让人感觉到屏幕上的内容是赏心悦目的，这里我们要权衡的的重点，我们会在顶部状态栏添加精细的触摸事件，并使用设计支持库的floating labels （实现自TextInputLayout）。 几乎所有的事情都都已经照顾到你。 完整的代码和样例托管在Github 当接口锁定时，防止后退按钮显示在登录Activity 上。 自定义 ProgressDialog来显示加载的状态。 符合材料设计规范。 悬浮标签（floating labels）（来自设计支持库） 用户表单输入校验 自定义状态栏样式 在每一个Activity 测试模仿验证的方法。 剩下的就是实现自己的身份验证逻辑。 获取源码 登录Activity让我们来设置登录Activity，通常是开始你的应用程序，会显示给用户的第一个要启动的Activity。 如果你想要添加社交登录按钮，请继续，但是当前在这个文章范围内，只给你基本的代码，让你有一个坚固的起点去构建你的验证流程。 需要注意的是 onBackPressed 方法将会被重写，这样将会防止用户关闭登录Activity。 LoginActivity.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136package com.sourcey.materiallogindemo;import android.app.ProgressDialog;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.content.Intent;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import butterknife.ButterKnife;import butterknife.InjectView;public class LoginActivity extends AppCompatActivity &#123; private static final String TAG = \"LoginActivity\"; private static final int REQUEST_SIGNUP = 0; @Bind(R.id.input_email) EditText _emailText; @Bind(R.id.input_password) EditText _passwordText; @Bind(R.id.btn_login) Button _loginButton; @Bind(R.id.link_signup) TextView _signupLink; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_login); ButterKnife.inject(this); _loginButton.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; login(); &#125; &#125;); _signupLink.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; // Start the Signup activity Intent intent = new Intent(getApplicationContext(), SignupActivity.class); startActivityForResult(intent, REQUEST_SIGNUP); &#125; &#125;); &#125; public void login() &#123; Log.d(TAG, \"Login\"); if (!validate()) &#123; onLoginFailed(); return; &#125; _loginButton.setEnabled(false); final ProgressDialog progressDialog = new ProgressDialog(LoginActivity.this, R.style.AppTheme_Dark_Dialog); progressDialog.setIndeterminate(true); progressDialog.setMessage(\"Authenticating...\"); progressDialog.show(); String email = _emailText.getText().toString(); String password = _passwordText.getText().toString(); // TODO: Implement your own authentication logic here. new android.os.Handler().postDelayed( new Runnable() &#123; public void run() &#123; // On complete call either onLoginSuccess or onLoginFailed onLoginSuccess(); // onLoginFailed(); progressDialog.dismiss(); &#125; &#125;, 3000); &#125; @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; if (requestCode == REQUEST_SIGNUP) &#123; if (resultCode == RESULT_OK) &#123; // TODO: Implement successful signup logic here // By default we just finish the Activity and log them in automatically this.finish(); &#125; &#125; &#125; @Override public void onBackPressed() &#123; // disable going back to the MainActivity moveTaskToBack(true); &#125; public void onLoginSuccess() &#123; _loginButton.setEnabled(true); finish(); &#125; public void onLoginFailed() &#123; Toast.makeText(getBaseContext(), \"Login failed\", Toast.LENGTH_LONG).show(); _loginButton.setEnabled(true); &#125; public boolean validate() &#123; boolean valid = true; String email = _emailText.getText().toString(); String password = _passwordText.getText().toString(); if (email.isEmpty() || !android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) &#123; _emailText.setError(\"enter a valid email address\"); valid = false; &#125; else &#123; _emailText.setError(null); &#125; if (password.isEmpty() || password.length() &lt; 4 || password.length() &gt; 10) &#123; _passwordText.setError(\"between 4 and 10 alphanumeric characters\"); valid = false; &#125; else &#123; _passwordText.setError(null); &#125; return valid; &#125;&#125; res/layout/activity_login.xml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"fill_parent\" android:layout_height=\"fill_parent\" android:fitsSystemWindows=\"true\"&gt; &lt;LinearLayout android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:paddingTop=\"56dp\" android:paddingLeft=\"24dp\" android:paddingRight=\"24dp\"&gt; &lt;ImageView android:src=\"@drawable/logo\" android:layout_width=\"wrap_content\" android:layout_height=\"72dp\" android:layout_marginBottom=\"24dp\" android:layout_gravity=\"center_horizontal\" /&gt; &lt;!-- Email Label --&gt; &lt;android.support.design.widget.TextInputLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginTop=\"8dp\" android:layout_marginBottom=\"8dp\"&gt; &lt;EditText android:id=\"@+id/input_email\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:inputType=\"textEmailAddress\" android:hint=\"Email\" /&gt; &lt;/android.support.design.widget.TextInputLayout&gt; &lt;!-- Password Label --&gt; &lt;android.support.design.widget.TextInputLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginTop=\"8dp\" android:layout_marginBottom=\"8dp\"&gt; &lt;EditText android:id=\"@+id/input_password\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:inputType=\"textPassword\" android:hint=\"Password\"/&gt; &lt;/android.support.design.widget.TextInputLayout&gt; &lt;android.support.v7.widget.AppCompatButton android:id=\"@+id/btn_login\" android:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\" android:layout_marginTop=\"24dp\" android:layout_marginBottom=\"24dp\" android:padding=\"12dp\" android:text=\"Login\"/&gt; &lt;TextView android:id=\"@+id/link_signup\" android:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\" android:layout_marginBottom=\"24dp\" android:text=\"No account yet? Create one\" android:gravity=\"center\" android:textSize=\"16dip\"/&gt; &lt;/LinearLayout&gt;&lt;/ScrollView&gt; 注册 Activity注册Activity 可以让你在App 中创建一个用户，通常会在登录Activity 中显示（注册的）链接。 需要注意的是当用户注册成功时我们会设置一个RESULT_OK 的结果值，这个结果将会在登录Activity 中的 onActivityResult 方法中调用，并且确定注册成功是如何处理的。当前逻辑是很简单的，当用户注册成功时我们会马上做一个记录。当然你想要实现邮箱验证，你需要自己来实现。 SignupActivity.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125package com.sourcey.materiallogindemo;import android.app.ProgressDialog;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import butterknife.ButterKnife;import butterknife.InjectView;public class SignupActivity extends AppCompatActivity &#123; private static final String TAG = \"SignupActivity\"; @Bind(R.id.input_name) EditText _nameText; @Bind(R.id.input_email) EditText _emailText; @Bind(R.id.input_password) EditText _passwordText; @Bind(R.id.btn_signup) Button _signupButton; @Bind(R.id.link_login) TextView _loginLink; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_signup); ButterKnife.inject(this); _signupButton.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; signup(); &#125; &#125;); _loginLink.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; // Finish the registration screen and return to the Login activity finish(); &#125; &#125;); &#125; public void signup() &#123; Log.d(TAG, \"Signup\"); if (!validate()) &#123; onSignupFailed(); return; &#125; _signupButton.setEnabled(false); final ProgressDialog progressDialog = new ProgressDialog(SignupActivity.this, R.style.AppTheme_Dark_Dialog); progressDialog.setIndeterminate(true); progressDialog.setMessage(\"Creating Account...\"); progressDialog.show(); String name = _nameText.getText().toString(); String email = _emailText.getText().toString(); String password = _passwordText.getText().toString(); // TODO: Implement your own signup logic here. new android.os.Handler().postDelayed( new Runnable() &#123; public void run() &#123; // On complete call either onSignupSuccess or onSignupFailed // depending on success onSignupSuccess(); // onSignupFailed(); progressDialog.dismiss(); &#125; &#125;, 3000); &#125; public void onSignupSuccess() &#123; _signupButton.setEnabled(true); setResult(RESULT_OK, null); finish(); &#125; public void onSignupFailed() &#123; Toast.makeText(getBaseContext(), \"Login failed\", Toast.LENGTH_LONG).show(); _signupButton.setEnabled(true); &#125; public boolean validate() &#123; boolean valid = true; String name = _nameText.getText().toString(); String email = _emailText.getText().toString(); String password = _passwordText.getText().toString(); if (name.isEmpty() || name.length() &lt; 3) &#123; _nameText.setError(\"at least 3 characters\"); valid = false; &#125; else &#123; _nameText.setError(null); &#125; if (email.isEmpty() || !android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) &#123; _emailText.setError(\"enter a valid email address\"); valid = false; &#125; else &#123; _emailText.setError(null); &#125; if (password.isEmpty() || password.length() &lt; 4 || password.length() &gt; 10) &#123; _passwordText.setError(\"between 4 and 10 alphanumeric characters\"); valid = false; &#125; else &#123; _passwordText.setError(null); &#125; return valid; &#125;&#125; res/layout/activity_signup.xml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"fill_parent\" android:layout_height=\"fill_parent\" android:fitsSystemWindows=\"true\"&gt; &lt;LinearLayout android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:paddingTop=\"56dp\" android:paddingLeft=\"24dp\" android:paddingRight=\"24dp\"&gt; &lt;ImageView android:src=\"@drawable/logo\" android:layout_width=\"wrap_content\" android:layout_height=\"72dp\" android:layout_marginBottom=\"24dp\" android:layout_gravity=\"center_horizontal\" /&gt; &lt;!-- Name Label --&gt; &lt;android.support.design.widget.TextInputLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginTop=\"8dp\" android:layout_marginBottom=\"8dp\"&gt; &lt;EditText android:id=\"@+id/input_name\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:inputType=\"textCapWords\" android:hint=\"Name\" /&gt; &lt;/android.support.design.widget.TextInputLayout&gt; &lt;!-- Email Label --&gt; &lt;android.support.design.widget.TextInputLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginTop=\"8dp\" android:layout_marginBottom=\"8dp\"&gt; &lt;EditText android:id=\"@+id/input_email\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:inputType=\"textEmailAddress\" android:hint=\"Email\" /&gt; &lt;/android.support.design.widget.TextInputLayout&gt; &lt;!-- Password Label --&gt; &lt;android.support.design.widget.TextInputLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginTop=\"8dp\" android:layout_marginBottom=\"8dp\"&gt; &lt;EditText android:id=\"@+id/input_password\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:inputType=\"textPassword\" android:hint=\"Password\"/&gt; &lt;/android.support.design.widget.TextInputLayout&gt; &lt;!-- Signup Button --&gt; &lt;android.support.v7.widget.AppCompatButton android:id=\"@+id/btn_signup\" android:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\" android:layout_marginTop=\"24dp\" android:layout_marginBottom=\"24dp\" android:padding=\"12dp\" android:text=\"Create Account\"/&gt; &lt;TextView android:id=\"@+id/link_login\" android:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\" android:layout_marginBottom=\"24dp\" android:text=\"Already a member? Login\" android:gravity=\"center\" android:textSize=\"16dip\"/&gt; &lt;/LinearLayout&gt;&lt;/ScrollView&gt; 配置为了让程序一切正常工作，我们在需要在 app 目录下的 build.gradle 中添加一些依赖，ButterKnife 是可选的，当然我们更喜欢用它让我们的Java 代码更加整洁一些。 123456dependencies &#123; compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;]) compile &apos;com.android.support:appcompat-v7:22.2.0&apos; compile &apos;com.android.support:design:22.2.0&apos; compile &apos;com.jakewharton:butterknife:7.0.1&apos;&#125; 还有一个我们必须要在AndroidManifest 中添加声明Activity。我已经把AndroidManifest 清晰完整的代码贴了出来。 12345678910111213141516171819202122232425&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.sourcey.materiallogindemo\" &gt; &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt; &lt;application android:allowBackup=\"true\" android:icon=\"@mipmap/ic_launcher\" android:label=\"@string/app_name\" android:theme=\"@style/AppTheme\" &gt; &lt;activity android:name=\".MainActivity\" android:label=\"@string/app_name\" &gt; &lt;intent-filter&gt; &lt;action android:name=\"android.intent.action.MAIN\" /&gt; &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;activity android:name=\".LoginActivity\" android:theme=\"@style/AppTheme.Dark\" /&gt; &lt;activity android:name=\".SignupActivity\" android:theme=\"@style/AppTheme.Dark\" /&gt; &lt;/application&gt;&lt;/manifest&gt; 希望这篇文章对你是有帮助的，如果这篇文章真的节约你宝贵的开发时间，请给我留言。 本文作者：sourcey本文译者：Tikitoo原文链接：http://sourcey.com/beautiful-android-login-and-signup-screens-with-material-design/翻译链接：http://tikitoo.github.io/2016/05/14/beautiful-android-login-and-signup-screens-with-material-design-zh非商业转载转载请在开头注明作者详细信息和本文出处，以及本文所有内容。 本文首发我的微信公众号，分享Android 开发和互联网内容。微信号：AndroidMate公众号：安卓同学","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://tikitoo.github.io/tags/Android/"},{"name":"翻译","slug":"翻译","permalink":"http://tikitoo.github.io/tags/翻译/"},{"name":"Material Design","slug":"Material-Design","permalink":"http://tikitoo.github.io/tags/Material-Design/"}]},{"title":"Android Studio 提示与技巧（官方文档翻译）","slug":"android-studio-tips-and-tricks-zh","date":"2016-05-10T14:58:41.000Z","updated":"2016-05-17T13:47:54.000Z","comments":true,"path":"2016/05/10/android-studio-tips-and-tricks-zh/","link":"","permalink":"http://tikitoo.github.io/2016/05/10/android-studio-tips-and-tricks-zh/","excerpt":"","text":"这是翻译官方的文档，英语好的可以直接去官方文档查看，英语不好，大家就将就看吧，算是我翻译的第一篇技术文章，因为是个英语渣，技术也渣，所以最近在学英语，就尝试着自己来翻译，不过翻译有不好的地方，大家可以指出来，我会在以后的翻译中慢慢改进。以后我也会尝试者每周翻译一篇英文技术文章，如果你有好的学习英语和翻译方面的技巧，欢迎与我交流。原文链接：http://developer.android.com/intl/zh-cn/sdk/installing/studio-tips.html 如果你对Android Studio 和Intellij IDEA 的界面很陌生的话，刚好这篇文章提供一些技巧，教你一些最常见的技巧来使你提高生产率。 高效率快捷键Android Studio 包括了许多功能，来帮助你的编程效率更高，这部分包含了一些特性帮助你快速，高效地工作。 智能渲染使用智能渲染，Android Studio 中显示快速修复渲染的错误的链接。例如，如果你在布局文件中添加一个不指定宽和高的按钮，Android Studio 会自动会将缺少的属性显示在渲染的消息中。点击这些消息在布局中添加缺少的属性。 在调试中渲染Bitmap当你在调试中，你可以右键点击Bitmap 变量在你的App 来调用Bitmap 视图。这将提取从调试的过程相关数据，并显示调试器中的Bitmap 中。 创建新文件你可以通过点击Project 面板中相应的文件夹中，通过输入“Alt + Insert”(Windows/Linux) ，或者Command + N(Mac)，来快速添加新的代码和资源文件。根据所选中的目录类型，Android Studio 会提供创建适当的文件类型。例如，如果你选中一个布局目录，键入“Alt + Insert”（在Windows），选中布局资源文件，打开一个对话框，你可以输入一个文件的名字（可以省去.xml 后缀），然后选择根节点，编辑后会切换到设计编辑器中，你可以开始设计布局。 输出框信息过滤当你检查构建（build） 结果，你可以按照消息类型过滤消息，快速找到感兴趣的消息。 父层次设置Activity 上一个Activity 可以通过在一个Activity 向导中创建一个新的Activity 中设置。设置父层次的返回按钮自动引入在你的应用中的ActionBar 中。因此返回按钮不需要在“menu.xml” 中手动指定了。 创建布局Android Studio 提供了一个高级的布局编辑器，允许你拖拽控件到你的布局中。在预览布局中编辑XML 。当在编辑Text 视图中，你可以打开在窗口的右侧预览面板设置上的布局。你可以通过修改面板顶部面板改变各种选项来修改预览，包括预览设备，主题，平台版本等等，可以同时预览多个设备上布局，可以从“设备”选项中下拉”预览所有屏幕的尺寸” 的选项。 你可以通过点击底部的Design 窗口来切换图形编辑器。当编辑是Desin 视图时，你可以通过点击左边的窗口的面板拖拽来显示和隐藏控件。点击Designer 右边窗口的显示面板，显示布局的层次和在布局文件中每个View 的属性列表。 注解Android Studio 提供了 Support-Annotations 库帮助你在代码中使用注解，它属于支持库的一部分，添加依赖这个库可以装饰你的代码，帮助你捕获Bug，比如空指针异常，资源类型冲突，你也可以创建枚举注解，例如，从一组定义的常量中检查传入的参数值，更多请看 改善与标注的代码检查。 Java 类反编译当你没有查找到源代码时，Android Studio 允许你查看Java 库里有什么。内置反编译让在Android Studio 中很方便，右击一个类，方法或者字段，当你没有源文件并且选择反编译。反编译的代码会出现。要调整反编译的设置，选择 File &gt; Settings &gt; Other Settings &gt; Java Decompiler。 调试和性能增强Android Studio 提供了调试和性能增强，比如： 自定义快捷键，更改当前的快捷键，选择 File &gt; Settings &gt; Keymap。 支持高分辨率（视网膜）显示在Widnows 和Linux。 Scratch 文件快速原型文件，不会创造任何项目文件。选择Tools &gt; New Scratch File 打开一个Scratch 文件快速构建和运行代码原型。再加上Android Studio 的代码辅助，Scratch 文件允许你快速运行和支持所有文件类型的调试代码更新。通过嵌入脚本语言创建的代码，你可以从临时文件中运行代码。 动态模板动态模板允许你输入代码片段快速插入和完成小块的代码。插入动态模板输入模板的缩写点击Tab 键，Android Studio 中插入代码片段到相关联的代码中。 例如，输入 newInstance 缩写，按Tab 键将插入一个新初始化包括参数占位符的Fragment 。12345678public static $fragment$ newInstance($args$) &#123; $nullChecks$ Bundle args = new Bundle(); $addArgs$ $fragment$ fragment = new $fragment$(); fragment.setArguments(args); return fragment;&#125; 相似的，输入 fbc 将插入 findViewById 将调用资源Id 要转换的类型。1() findViewById(R.id.); 用 File &gt; Settings &gt; Editor &gt; Live Templates 菜单选项来显示，支持实时模板和自定义插入代码。 基于的IntelliJ编码实践工作本节仅仅是一小部分代码编辑实践。当你在使用Android Studio 时你应该考虑使用它。 想要了解IntelliJ IDEA的界面完整的用户文档（Android Studio 是基于它的）请参考 IntelliJ IDEA 文档。 Alt + Enter快速修复代码中的错误，强大的Intellij 实现了Alt + Enter 修复错误（遗漏的导入，变量赋值，丢失的引用等）在可能的情况下，如果不可以，选择最有可能解决问题的建议。 Ctrl + DCtrl + D 是一个强大的快速复制代码行和片段，只需要选择所需的行或者片段，然后输入这个快捷键（Ctrl + D）。 导航菜单如果你不熟悉一些API 的类，文件或者标识，导航菜单可以可以直接跳转类的方法，字段，而不需要你在手动去搜索。 范围检查代码段范围指定的更容易识别和定位的颜色，例如，你可以设定一个范围，以确定指定ActionBar 的ID。 注入语言使用嵌入语言，Android Studio 允许你在工作区中嵌入不同的语言，这个语法的延伸，错误高亮和嵌入语言的编码帮助。这对于内嵌检查正则表达式的值和验证XML 是非常有用的。 代码折叠这让你可以选择性地隐藏和显示部分可读代码。例如资源表达式或者内嵌代码可以被折叠或隐藏成一行，使得外部的结构更加容易阅读。 图片和颜色预览当你在代码中引用图片或者图标，会在代码边上显示图片或者图标的预览（根据实际尺寸的不同密度），以帮助你验证图像或图标参考。按 F1 键在预览图片或者图标显示资源文件的详细信息。例如dp 的设置。 快速查找文档你可以检查使用的主题属性 View &gt; Quick Documentation (F1)，查看主题的的继承层次，并解决各种属性值。 如果你调用 View &gt; Quick Documentation (usually bound to F1) 来查看android:textAppearanceLarge 的主题属性值。你将会看到主题的继承层次，显示出各种属性解析值。 快捷键下表列出了常用的键盘快捷键。修改默认的快捷键可以在：File &gt; Settings &gt; Keymap（Windows/Linux）。如果你使用Mac OS X，必须更新到Mac OS X 10.5+ 的版本来使用快捷键： Android Studio &gt; Preferences &gt; Keymap。 编程键盘命令 名字 快捷键 命令查找 CTRL + SHIFT + A 工程快速修复 ALT + ENTER 格式化代码 CTRL + ALT + L (Win)OPTION + CMD + L (Mac) 显示文档 CTRL + Q (Win)F1 (Mac) 显示选中方法的参数 CTRL + P 生成方法 ALT + Insert (Win)CMD + N (Mac) 跳转到源码 F4 (Win)CMD + down-arrow (Mac) 删除行 CTRL + Y (Win)CMD + Backspace (Mac) 通过符号名称搜索 CTRL + ALT + SHIFT + N (Win)OPTION + CMD + O (Mac) 工程和编辑器快捷键 名字 快捷键 构建 CTRL + F9 (Win)CMD + F9 (Mac) 构建和运行 SHIFT + F10 (Win)CTRL + R (Mac) 切换项目可见 ALT + 1 (Win)CMD + 1 (Mac) 导航打开的标签页 ALT + left-arrow; ALT + right-arrow (Win)CTRL + left-arrow; CTRL + right-arrow (Mac) 更多的快捷键完全参考指南，请看IntelliJ IDEA 文档。 本文作者：Tikitoo本文出处：http://tikitoo.github.io/2016/05/10/android-studio-tips-and-tricks-zh非商业转载转载请在开头注明作者详细信息和本文出处。 本文首发我的微信公众号，分享Android 开发和互联网内容。微信号：AndroidMate公众号：安卓同学","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://tikitoo.github.io/tags/Android/"},{"name":"Android Studio","slug":"Android-Studio","permalink":"http://tikitoo.github.io/tags/Android-Studio/"},{"name":"翻译","slug":"翻译","permalink":"http://tikitoo.github.io/tags/翻译/"}]},{"title":"Android 开发值得订阅的日报和周刊","slug":"android-worth-subscribe-daily-weekly","date":"2016-04-26T14:58:41.000Z","updated":"2016-04-26T15:03:40.000Z","comments":true,"path":"2016/04/26/android-worth-subscribe-daily-weekly/","link":"","permalink":"http://tikitoo.github.io/2016/04/26/android-worth-subscribe-daily-weekly/","excerpt":"","text":"Android Weekly Android Weekly 是由一群国外知名的Android 开发者维护，分享的内容不仅仅只有干货，而且还有最新的技术分享，也是Android 开发圈子最早，最有名的周报。如果想看中文版，请移步知乎专栏——《Android Weekly - 知乎专栏》。 Android开发技术周报Android开发技术周报是由@脉脉不嘚語 维护更新，截止到现在，已经发布了28 期，分享的都是高质量的文章教程，代码库，工具，新闻视频，设计等。 Android 科学院由@duguguiyu 和豌豆荚一小撮工程师组成，分享的都是最新的Android 技术；虽然更新频率不是很高，但是质量确是很很高的，值得一看的。 开发技术前线开发技术前线是一个高质量技术文章的聚合网站，主要翻译国外Android，iOS 的优质文章，以及招聘等内容。 App开发日报App开发日报主要关注移动应用的开发，它每天一刊，分享的内容主要来自微博上知名的开发者推荐的内容，因此质量基本上是有保证的。 移动开发每周阅读清单移动开发每周阅读清单是由InfoQ 维护更新的iOS 和Android 的周刊，它的前身是InfoQ 维护的Android 开发周刊和iOS 开发周刊，然后将两者合并组成了移动开发每周阅读清单。它不仅分享Android 的相关新闻，新工具，而且还有更加深入的，所以对于新生老人都很适合。 Android 周报Android 周报是由@Android 笔记 维护，目前已更新了30 期。 干货集中营干货集中营是由代码家和一撮编辑一同维护的Android 和iOS 的日报，每天更新，当然也有妹子，算是Android 开发更新更新最频繁的。 The Android ArsenalAndroid Arsenal 主要是推荐Github 上一些流行的Android 开源项目，基本上最近热门的Android 开源项目都会出现在这里，它还对不同类库进行了分类。 codeKK codeKK 是一个专门分析开源项目源码的网站，由Trinea 和一群大牛维护更新的，刚开始是一个开源项目，后来建立了独立的网站，而且也有专门的分类。而且也对一些流行的开源项目的收录。 Android Blog 周刊Android Blog 周刊 是由Jomeslu 维护更新的Android 博客周刊，截止到目前已经更新到了15 期，除了有最新的Android 开发的新闻，还有国内外博客，还有类库和人文的推荐。 Android DevAndroid Dev 是由Tikitoo 维护更新的简书专栏，主要收录在简书上Android 的技术文章，目前已经收录两百篇Android 技术文章，如果你在简书写文章，欢迎去投稿。 Android 开发经验谈Android 开发经验谈是由张明云 维护更新的简书专栏，目前已经收录了近千篇Android 技术文章。如果你在简书写Android 技术文章，当然可以随便投稿啦。 【安卓同学(AndroidMate)】的公众号，更多分享…","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://tikitoo.github.io/tags/Android/"},{"name":"日报","slug":"日报","permalink":"http://tikitoo.github.io/tags/日报/"},{"name":"周刊","slug":"周刊","permalink":"http://tikitoo.github.io/tags/周刊/"}]},{"title":"这些小工具让你的Android 开发更高效（下）","slug":"android_develop_tools_02","date":"2016-04-06T23:41:41.000Z","updated":"2016-04-20T12:49:48.000Z","comments":true,"path":"2016/04/07/android_develop_tools_02/","link":"","permalink":"http://tikitoo.github.io/2016/04/07/android_develop_tools_02/","excerpt":"","text":"在做Android 开发过程中，会遇到一些小的问题，虽然自己动手也能解决，但是有了一些小工具，解决这些问题就得心应手了，今天就为大家推荐一下Android 开发遇到的小工具，来让你的开发更高效。 Vysor Vysor 是一个可以将手机的屏幕投影到电脑上，当然也可以操作，当我们做分享或者演示的时候，这个工具起到了作用。 Vector Asset Android Studio 在1.4 支持了VectorAsset，所谓VectorAsset；它可以帮助你在Android 项目中添加Material Icon 和SVG 图片来作为一个Drawable 资源来使用。不过唯一一点的缺陷就是没有搜索功能，如果你想精心挑选Material Icon ，可以打来网页版https://design.google.com/icons/ 来选择，也可以下载SVG 和Png 格式。对于VectorAsset 的好处，它的文件更小，更容易适配不同的屏幕。 Stetho Stetho 是一个Android 开发调试小工具，它可以让你使用Chrome Develop Tools 来可以来查看Sqlite 数据库和SharePreferences，而且可以查看网络连接的数据。在Chrome 输入框输入chrome://inspect，点击inspect 就可以开始了。如果使用OkHttp 需要添加拦截器StethoInterceptor。 OctoTree OctoTree 是一个浏览器插件，它可以让你在Github 看代码时，左边栏会出现一个树状结构，就像我们在IDE 一样。当我们看一个项目的结构，或者想看具体的某个文件，这样就会很方便。 Chrome ADB Chrome ADB 是一个使用Chrome 来调试Android 的小工具，它除了提供了安装，卸载，清理数据的基本功能，而且还提供了主页，返回，锁屏的虚拟键功能，也可以看各个应用占用的内存（不得不点名批评一下微信，关闭都还占用100M 内存，不知道你要干嘛）。它还有Android 的App，两者交互一定更有意思。 TinyPng TinyPng 是一个图片压缩工具，可能有些人感觉这个工具应该给设计师使用，我觉得也是。不过有些时候，设计师给你出了个1920* 1080 的启动页，一张图片，1M 左右，我也是泪奔了，感觉设计师说话的时间，估计我们都压缩完了，自己动手，丰衣足食。而且它还提供了API，对不同语言都还有提供了插件，比如Java 就提供了Maven 的支持。 PostMan PostMan 是一个API 调试工具，它提供Chrome App 和Mac App，除了提供基本的API 测试功能， 它还可以添加各种的Auth 认证，响应结果可以选择不同类型，比如HTML，JSON 等，可以设置通用的Header，还可以将之前测试的添加到一个集合，而且也可以同步到服务器，而且最近还添加了团队服务，想想服务器端写完测试你就能看到结果，而不是给你API 文档（当然API 文档还是要有的），这画面太美，我不敢想象。当然它的功能也远远不止这些，它还有专业版，想尝试更多的东西可以体验一下。 Genymotion 虚拟机 刚开始做开发的时候，每次使用官方的虚拟机，都想吐槽一下，但是发现了Genymotion 之后，这一切都变化了，它的速度几乎可以和真机媲美了，当然如果有真机，当然还是推荐使用真机测试。据说官方模拟器2.0 很快，不知道是不是又吹牛逼。 Json2POJO Json2POJO 是可以将一个Json 字符串转换成Java 的POJO 类的网页工具，而且可以选择转换器，比如我们使用Retrofit 可以选择Jackson，Gson，而且可以选择重写get，set 方法，还有hashcode，equals 和toString 方法，可以省去了不少手写的时间。 Android Pixel AndroidPixel 是一个简单的将不同的分辨率的换算工具，只要你有一个尺寸的大小，其他的尺寸大小就可以得出，当然dp 这样的单位，可以解决一部分问题，但是大多还要需要微调，这时AndroidPixel 就起到了作用。这个工具来自上一个公司同事告诉我的。 Android Arsenal Android Arsenal 主要是推荐Github 上一些流行的Android 开源项目，基本上最近热门的Android 开源项目都会出现在这里，它还对不同类库进行了分类。 Codota Codota 是一款Android 代码搜索工具，Codota 目前已经收录超过七百万精品代码实例；具体的详细介绍请看文章《Android 开发工具之Codota——搜索最好的Android 代码 - 简书》，而且发现好的代码段，可以自己收藏。 AndroidAssetStudio Android Asset Studio 是一个在线制作工具，它可以制作Iocn，ActionBar，点9 图等等，简单的操作，大大提高了我们开发的效率。 WiFi ADB WiFi ADB 是一个通过无线网络来使电脑和手机连接的手机App（可以去Google Play 搜索类似的），当我们做测试的时候，只需在手机上打开，电脑只需在命令行输入 adb connect xxx.xxx.xxx.xxx:5555，电脑可以连接手机，就可以通过无线网络来调试开发的应用。 ES Explorer ES Explorer 是一款文件管理器，但实际它又不仅仅是一款文件管理器，在获得Root 之后，它的功能更强大了，它可以浏览受限制的文件目录；而且提供了一系列小工具，比如下载器；还有集成了众多云储存服务。 是不是感觉好多都没有提到，点击下方关注我的公众号，查看下篇吧。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://tikitoo.github.io/tags/Android/"},{"name":"工具","slug":"工具","permalink":"http://tikitoo.github.io/tags/工具/"},{"name":"Tool","slug":"Tool","permalink":"http://tikitoo.github.io/tags/Tool/"}]},{"title":"这些小工具让你的Android 开发更高效（上）","slug":"android_develop_tools_01","date":"2016-03-20T00:54:41.000Z","updated":"2016-04-20T12:49:46.000Z","comments":true,"path":"2016/03/20/android_develop_tools_01/","link":"","permalink":"http://tikitoo.github.io/2016/03/20/android_develop_tools_01/","excerpt":"","text":"在做Android 开发过程中，会遇到一些小的问题，虽然自己动手也能解决，但是有了一些小工具，解决这些问题就得心应手了，今天就为大家推荐一下Android 开发遇到的小工具，来让你的开发更高效。 Vysor Vysor 是一个可以将手机的屏幕投影到电脑上，当然也可以操作，当我们做分享或者演示的时候，这个工具起到了作用。 Vector Asset Android Studio 在1.4 支持了VectorAsset，所谓VectorAsset；它可以帮助你在Android 项目中添加Material Icon 和SVG 图片来作为一个Drawable 资源来使用。不过唯一一点的缺陷就是没有搜索功能，如果你想精心挑选Material Icon ，可以打来网页版https://design.google.com/icons/ 来选择，也可以下载SVG 和Png 格式。对于VectorAsset 的好处，它的文件更小，更容易适配不同的屏幕。 Stetho Stetho 是一个Android 开发调试小工具，它可以让你使用Chrome Develop Tools 来可以来查看Sqlite 数据库和SharePreferences，而且可以查看网络连接的数据。在Chrome 输入框输入chrome://inspect，点击inspect 就可以开始了。如果使用OkHttp 需要添加拦截器StethoInterceptor。 OctoTree OctoTree 是一个浏览器插件，它可以让你在Github 看代码时，左边栏会出现一个树状结构，就像我们在IDE 一样。当我们看一个项目的结构，或者想看具体的某个文件，这样就会很方便。 Chrome ADB Chrome ADB 是一个使用Chrome 来调试Android 的小工具，它除了提供了安装，卸载，清理数据的基本功能，而且还提供了主页，返回，锁屏的虚拟键功能，也可以看各个应用占用的内存（不得不点名批评一下微信，关闭都还占用100M 内存，不知道你要干嘛）。它还有Android 的App，两者交互一定更有意思。 TinyPng TinyPng 是一个图片压缩工具，可能有些人感觉这个工具应该给设计师使用，我觉得也是。不过有些时候，设计师给你出了个1920* 1080 的启动页，一张图片，1M 左右，我也是泪奔了，感觉设计师说话的时间，估计我们都压缩完了，自己动手，丰衣足食。而且它还提供了API，对不同语言都还有提供了插件，比如Java 就提供了Maven 的支持。 PostMan PostMan 是一个API 调试工具，它提供Chrome App 和Mac App，除了提供基本的API 测试功能， 它还可以添加各种的Auth 认证，响应结果可以选择不同类型，比如HTML，JSON 等，可以设置通用的Header，还可以将之前测试的添加到一个集合，而且也可以同步到服务器，而且最近还添加了团队服务，想想服务器端写完测试你就能看到结果，而不是给你API 文档（当然API 文档还是要有的），这画面太美，我不敢想象。当然它的功能也远远不止这些，它还有专业版，想尝试更多的东西可以体验一下。 Genymotion 虚拟机 刚开始做开发的时候，每次使用官方的虚拟机，都想吐槽一下，但是发现了Genymotion 之后，这一切都变化了，它的速度几乎可以和真机媲美了，当然如果有真机，当然还是推荐使用真机测试。据说官方模拟器2.0 很快，不知道是不是又吹牛逼。 Json2POJO Json2POJO 是可以将一个Json 字符串转换成Java 的POJO 类的网页工具，而且可以选择转换器，比如我们使用Retrofit 可以选择Jackson，Gson，而且可以选择重写get，set 方法，还有hashcode，equals 和toString 方法，可以省去了不少手写的时间。 Android Pixel AndroidPixel 是一个简单的将不同的分辨率的换算工具，只要你有一个尺寸的大小，其他的尺寸大小就可以得出，当然dp 这样的单位，可以解决一部分问题，但是大多还要需要微调，这时AndroidPixel 就起到了作用。这个工具来自上一个公司同事告诉我的。 Android Arsenal Android Arsenal 主要是推荐Github 上一些流行的Android 开源项目，基本上最近热门的Android 开源项目都会出现在这里，它还对不同类库进行了分类。 Codota Codota 是一款Android 代码搜索工具，Codota 目前已经收录超过七百万精品代码实例；具体的详细介绍请看文章《Android 开发工具之Codota——搜索最好的Android 代码 - 简书》，而且发现好的代码段，可以自己收藏。 AndroidAssetStudio Android Asset Studio 是一个在线制作工具，它可以制作Iocn，ActionBar，点9 图等等，简单的操作，大大提高了我们开发的效率。 WiFi ADB WiFi ADB 是一个通过无线网络来使电脑和手机连接的手机App（可以去Google Play 搜索类似的），当我们做测试的时候，只需在手机上打开，电脑只需在命令行输入 adb connect xxx.xxx.xxx.xxx:5555，电脑可以连接手机，就可以通过无线网络来调试开发的应用。 ES Explorer ES Explorer 是一款文件管理器，但实际它又不仅仅是一款文件管理器，在获得Root 之后，它的功能更强大了，它可以浏览受限制的文件目录；而且提供了一系列小工具，比如下载器；还有集成了众多云储存服务。 是不是感觉好多都没有提到，点击下方关注我的公众号，查看下篇吧。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://tikitoo.github.io/tags/Android/"},{"name":"工具","slug":"工具","permalink":"http://tikitoo.github.io/tags/工具/"},{"name":"Tool","slug":"Tool","permalink":"http://tikitoo.github.io/tags/Tool/"}]},{"title":"Android 中 Handler，Looper，HandlerThread 的使用","slug":"android_handler_looper","date":"2016-03-19T03:23:41.000Z","updated":"2016-04-20T12:48:38.000Z","comments":true,"path":"2016/03/19/android_handler_looper/","link":"","permalink":"http://tikitoo.github.io/2016/03/19/android_handler_looper/","excerpt":"","text":"Android 中非UI 线程（WorkThread）不能操作UI 线程（MainThread），那线程之间通信我们该怎么办？在Java 我们可以通过多线程来处理，但是Java 的多线程晦涩难懂，所以Android 的引入了Handler，Looper 的机制来处理线程间的通信。 其实网上有很多人都写过Handler，Looper 的教程，但是看别人的东西就像看过猪跑，和吃过猪肉的感觉完全不一样（这个恰当可能不太恰当，各位还是不要对号入座），所以我就自己来重新梳理梳理以便于自己理解更加深刻。 先来看看他们的工作流程吧 handler 发送Message 给MessageQueue，Looper 来轮询消息，如果有Message，然后再发送给Handler，Handler 拿到消息就可以所在的线程执行了。 一般就两种情况，MainThread 发送给WorkThread 和WorkThread 发送给MainThread，特别常用的情景就是我们在WorkThread 执行一些耗时的操作（网络请求，文件读写），返回的数据来更新MainThread，下面写个例子看一下。123456789101112131415161718192021222324public static final int WHAT_ONE = 1;Handler mMainHandler = new Handler() &#123; @Override public void handleMessage(Message msg) &#123; switch (msg.what) &#123; case WHAT_ONE: Toast.makeText(HandlerActivity.this, \"what one\", Toast.LENGTH_SHORT).show(); break; &#125; super.handleMessage(msg); &#125;&#125;;private void sendToMain() &#123; runOnUiThread(new Runnable() &#123; @Override public void run() &#123; mMainHandler.sendEmptyMessage(WHAT_ONE); &#125; &#125;);&#125; 在主线程创建一个Handler 重写handlerMessage(Message msg) 方法，然后使用handler 发送消息给Handler，在handlerMessage() 来处理，如果发送很多消息它是怎么区别的，其实Message 对象中有个what 字段，比这这个例子sendEmptyMessage() 就是发送一个空消息，只需要传一个what 字段，以便于Handler 接收消息来区分，发送消息这一块下面会详细讲。 另一种就是WorkThread 发送给MainThread12345678910111213141516171819202122232425262728293031323334private LooperThread looperThread;class LooperThread extends Thread &#123; public Handler mWorkHandler; @Override public void run() &#123; super.run(); Looper.prepare(); mWorkHandler = new Handler() &#123; @Override public void handleMessage(Message msg) &#123; switch (msg.what) &#123; case WHAT_ONE: mMainHandler.sendEmptyMessage(msg.what); break; &#125; super.handleMessage(msg); &#125; &#125;; Looper.loop(); &#125;&#125;private void sendToWork() &#123; looperThread = new LooperThread(); looperThread.start();&#125;private void sendToWork2() &#123; if (looperThread.mWorkHandler != null) &#123; looperThread.mWorkHandler.sendEmptyMessage(WHAT_ONE); &#125;&#125; 这个和上面的感觉有点不同，我们会创建一个线程，在run() 中创建Handler，然而发现会多调用了两个方法Looper.prepare() 和Looper.loop() 这两个方法是干什么用的。但发现上面第一个并没有调用这两个方法，其实并不是没有调用，只是在它的父类中ActivityThread 的main() 方法已经调用了。接下来就看看这两个方法到底干了什么。 Looper.prepare()12345678910111213141516171819public static void prepare() &#123; prepare(true);&#125;private static void prepare(boolean quitAllowed) &#123; if (sThreadLocal.get() != null) &#123; throw new RuntimeException(\"Only one Looper may be created per thread\"); &#125; sThreadLocal.set(new Looper(quitAllowed));&#125;// sThreadLocal.get() will return null unless you've called prepare().static final ThreadLocal&lt;Looper&gt; sThreadLocal = new ThreadLocal&lt;Looper&gt;();// 实例化Looperprivate Looper(boolean quitAllowed) &#123; mQueue = new MessageQueue(quitAllowed); mThread = Thread.currentThread();&#125; 会发现将实例化一个Looper 传给给sThreadLocal，只有sThreadLocal 为空的时候，才会传一个Looper那么就说sThreadLocal 只有一个Looper，如果在WorkThread 多次调用或者不调用都会报Only one Looper may be created per thread。而sThreadLocal 在全局已经初始化了，ThreadLocal 允许我们创建只能一个当前线程属于的对象当前读写的变量，就算其他线程中调用，也执行get 和set 方法，也无法获取这个的值，因此ThreadLocal 和Looper 是一一对应的。 Looper 实例化会创建一个MessageQueue 对象，它主要就是消息队列，来存储消息的。 Looper.loop()1234567891011121314151617181920212223242526272829303132333435363738394041public static @Nullable Looper myLooper() &#123; return sThreadLocal.get();&#125;public static void loop() &#123; final Looper me = myLooper(); if (me == null) &#123; throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\"); &#125; final MessageQueue queue = me.mQueue; for (;;) &#123; Message msg = queue.next(); // might block if (msg == null) &#123; // No message indicates that the message queue is quitting. return; &#125; // 最后会调用handlermMessage() msg.target.dispatchMessage(msg); msg.recycleUnchecked(); &#125;&#125;/** * Handle system messages here. */public void dispatchMessage(Message msg) &#123; if (msg.callback != null) &#123; handleCallback(msg); &#125; else &#123; if (mCallback != null) &#123; if (mCallback.handleMessage(msg)) &#123; return; &#125; &#125; handleMessage(msg); &#125;&#125; 看上面的loop() 的代码，我把一些不管紧要的代码都去掉了，核心代码基本上就这些了，首先我们会调用myLooper() 的方法，获取Looper 对象，然后再获取MessagQueue，然后就开始轮训了，获取Message，target 字段就是Handler 对象，因为每次发送消息都会讲当前的Handler 传送过去，dispatchMessage 最后调用handleMessage()。然后我们就在handleMessage() 根据what 字段来识别不同地方发送消息，然后做出相应的动作。 更深入的可以阅读下面的参考。 参考 http://anany.me/2015/04/12/handler/#http://developer.android.com/intl/zh-cn/reference/android/os/Handler.htmlhttp://blog.dreamtobe.cn/2016/03/11/android_handler_looperhttps://hit-alibaba.github.io/interview/Android/basic/Android-handler-thread-looper.html","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://tikitoo.github.io/tags/Android/"}]},{"title":"AsyncTask 的使用和注意的问题","slug":"android_asynctask_use_and_problem","date":"2016-03-14T00:05:41.000Z","updated":"2016-04-19T15:17:22.000Z","comments":true,"path":"2016/03/14/android_asynctask_use_and_problem/","link":"","permalink":"http://tikitoo.github.io/2016/03/14/android_asynctask_use_and_problem/","excerpt":"","text":"AsyncTask 算是我们比较经常使用的一个系统类了，我们知道费UI 线程是不能更新UI 的，当我们做一些耗时的操作只能借助Handler，Looper 来实现，比如我们从网络下载东西，想要进度条来更新，自己实现会很麻烦。然而使用AsyncTask 处理起来会非常轻松。它来做一些异步处理的请求，然后可以很轻松地更新UI。它是一个抽象类，就说明它是不具体的，我们要使用它，肯定要实现他的抽象方法。我们继承会发现AsyncTask 枚举有三个不同的变量，这个我们可以跟着他的不同的方法的参数和返回值来一块看会更加清晰。 onPreExecute()：在执行任务之前可以做一些初始化操作。Result doInBackground(Params…)：唯一的一个抽象方法，我们可以在这个方法执行耗时的操作。然后可以来更新UI。onPostExecute(Result result())：doInBackground() 方法的返回值会传给方法的参数。doInBackground() 执行完执行此方法。publishProgress(Progress… values)：在doInBackground() 方法中调用此方法，比如下载东西会随着下载的进度一直变化，将参数传给onProgressUpdate 方法，可以在onProgressUpdate 方法中更新的UI。onProgressUpdate(Progress… values)：更新UI。execute(Params…)：最后调用此方法就开始执行了。 123456789101112131415161718192021222324252627282930313233343536373839class Task extends AsyncTask&lt;String, Integer, Bitmap&gt;() &#123; @Override protected void onPreExecute() &#123; super.onPreExecute(); &#125; @Override protected Bitmap doInBackground(String... params) &#123; for (int i = 0; i &lt; 100; i++) &#123; try &#123; Thread.sleep(500); publishProgress(i); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); Thread.interrupted(); &#125; &#125; return null; &#125; @Override protected void onPostExecute(Bitmap bitmap) &#123; super.onPostExecute(bitmap); &#125; @Override protected void onProgressUpdate(Integer... values) &#123; super.onProgressUpdate(values); AsyncActivity.mProgressBar.setProgress(values[0]); &#125; @Override protected void onCancelled(Bitmap bitmap) &#123; super.onCancelled(bitmap); bitmap.recycle(); &#125; &#125;; 1new Task().execute(str); cancel(boolean)：可以随时取消任务。isCancelled()：判断任务是否取消onCancelled(Result result)：doInBackground() 执行完成后，并且cancel() 之后执行。 除了doInBackground() 方法，其他都是执行在UI 线程的。而doInBackground() 执行完可以来更新UI。 AsyncTask 中几个重要的概念AsyncTask 的原理是当多个任务，有一个默认的线程池SerialExecutor 来执行异步任务，然后在 子线程执行doInBackground 方法，AsyncTaskResult 一个持有AsyncTaskResult 持有AsyncTask，Result，然后通过Handler 发送AsyncTaskResult 对象再来更新UI 线程。FutureTask ：异步任务的取消和获取结果ThreadPoolExecutor：默认的一个线程池，你也可以使用executeOnExecutor() 方法传入自定义的线程池。 问题以及缺陷默认线程池设定的又最大线程数，一旦超出（默认为128）再提交任务，将会抛出RejectedExecutionException。内存泄露：AsyncTask 使用线程池来处，线程的声明周期是很不稳定，而且还要用来更新UI，一旦Activity 被destoy，将会造成内存泄露。所以使用时要讲持有对象使用弱引用。 参考 http://blog.csdn.net/guolin_blog/article/details/11711405http://www.cnblogs.com/dolphin0520/p/3949310.htmlhttp://blog.csdn.net/amurocrash/article/details/50876229http://developer.android.com/intl/zh-cn/reference/android/os/AsyncTask.htmlhttp://www.cnblogs.com/dolphin0520/p/3949310.html","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://tikitoo.github.io/tags/Android/"}]},{"title":"Android 开发进阶指南","slug":"android_medium_guide","date":"2016-02-29T23:22:41.000Z","updated":"2016-04-19T15:53:10.000Z","comments":true,"path":"2016/03/01/android_medium_guide/","link":"","permalink":"http://tikitoo.github.io/2016/03/01/android_medium_guide/","excerpt":"","text":"之前有人在朋友圈评论我说，现在学习Android 遇到了瓶颈，基本上一般的API，市面上大部分App UI 都能做出来，该怎么提高？然后我回复他了，我学习Android 也有一年左右，也是个菜鸟，也遇到这样的问题，所以就各种查资料，看看大神们都在研究什么技术，也跟着学习学习。当初在逛知乎看到了一些问题（PS：逛知乎还是很有好处的嘛！！！），看到很多回答就觉得很受启发，还有看别人的博客，也很受用，想要写一篇文章的想法，等了一两周才开始动手。 新手学习遇到瓶颈 我觉得新手做的更多是重复的工作，可能接触好的项目，前一两个月会觉得学到好的东西，但是随着公司的东西慢慢熟悉，也就变成日复一日的重复劳动，然后慢慢感觉也就学习遇到了瓶颈，而一些太难的东西又不太情愿去琢磨，比如读Android 源码，你使用Handler Loopeer 感觉很巧妙，可以仔细研究一下；还有就是很多第三方开源库你使用起来很方便，如果这个时候你仔细阅读源码，也一定能感受它的设计的巧妙。因此，我多方搜集，整理出来了以下几条，有一定经验接下来要做的事。 解决问题的能力。可能老手的遇到的Bug 可能比你写的代码都多。 阅读和理解源码。新手可能就是使用API，而老手会去阅读源码，理解开源项目或者Android 系统的源码，理解他们的架构。 深入理解Java 和Android 。Android 应用层的东西基本上基于Java，想要写好Android，Java 已经要过关。 了解编译原理等CS基本知识。我觉得这一条是每个程序员应该必备的。比如像计算机网络（HTTP，TCP/IP），算法与数据结构。下面我会分别按照这几点给大家详细讲解（其实是来看看大牛们的演讲）。 解决问题的能力 我觉得这个我没有能力回答，不过之前有幸听过一个演讲，@阿拉神农 邓凡平老师在北京GDG DevFest 的一个演讲，说过你进入一个项目组，不要惧怕问题和Bug，你把很多问题解决了，你的技术也会上升到一个层次。邓老师在文中也提到了怎么学，学到什么程度，以及学什么，还专门提到多线程，网络（HTTP，TCP/IP）编程，设计模式这些基础东西，就算Android 有一天不行了，这些东西也一样会被吸收借鉴的。关于演讲的内容：《Android开发进阶之旅》http://weibo.com/1826440077/D36AAiF2G。 注：邓老师从事软件开发有十余年，之前是做底层开发，现在在做应用层的开发，他也是《深入理解Android》系列书籍的主要作者之一。 阅读和理解源码 这个问题我也没有多大能力去回答，也读过一些开源库的源码，像Retrofit，Volley，还有像Handler Loopeer 的机制，其他的虽然阅读过，但是没有理解太深，这也是我以后努力的方向。还有人问问什么要读源码，我想说，如果你写写XML 布局文件，会用用API，一个实习生两三个月就和你差不多了，你还有什么资历说你很有经验，知其然知其所以然说的就是这样的意思，阅读和理解源码让你更好使用API，解决问题的能力也大有提高，也有了造轮子的能力。当然了跳槽面试的时候也可以吹牛逼了。 下面的两篇文章是Kaede 的博客上两篇文章，他也有自己的知乎专栏——《中二病也要开发Android》。Kaede 在文中阐述了，为什么要阅读Android 源码，以及该怎么读，还有要读哪些，对于源码接触不太多的同学有个参考，也推荐一些大牛的博客，站在巨人的肩上，有了前人的参考，也会事倍功半的。 有没有必要阅读Android源码http://kaedea.com/2016/02/08/android-about-source-code/ 阅读Android源码的一些姿势http://kaedea.com/2016/02/09/android-about-source-code-how-to-read/ 深入理解Java Java语言相对来说比C++ 简单很多，但是对于经常写业务代码的人，对于如何写出优雅的java代码以及如何辨别垃圾代码，还有Java的内存模型/GC，并发机制，虚拟机执行流程肯定不甚了解，因此，这个阶段，我打算大致搞清楚Java语言本身，顺便从这个角度切入编程语言本身；主要如下： 学习如何写更好的Java 代码，《Effective Java》值得一读。 什么样的Java 代码是有问题的？《Java解惑》；怎么改写代码？《重构》 学习一些没有接触过的Java 高级库，NIO/AIO, concurrent/forkjoin等，有机会使用到工作过程中。 了解Java 虚拟机 《深入理解Java 虚拟机》《实战Java 虚拟机》；从这里，可以知道很多JVM 的运行原理，内存模型，class 文件格式，Java 并发原理，虚拟机执行引擎等相当多的东西；虽然说Android 的虚拟机Dalvik 和ART（ART 也许称不上虚拟机）使用的不是标准的HotSpot 但是，我相信原理都差不多。 但是，Java平台的技术栈远非这么一点，学无止境；走到这一步，我觉得对于Java语言已经算得上掌握了，于是主要目标转向编程语言本身。 深入Android 这一块有很多人分享过经验，其实无非那么几点，我就简单重申一下吧。 IPC机制，Binder和匿名共享内存等 四大组件启动，工作原理 View系统，绘制原理，事件分发 动画框架，原理 多线程机制，消息机制 AsyncTask，Thread/Handler 系统启动过程，system_server启动过程 Window系统，Window创建过程 资源管理系统，资源加载机制等 《Android 开发艺术探索》这本书确实不错，适合中级程序员。个人感觉《Android 内核剖析》挺不错的，虽然有点过时了也买不到书了。 《Android 源码设计模式》，在Android 的源码中都有什么使用哪些设计模式，也让你更深入去理解源码。当你搞清楚了这些，基本上你写的什么代码在Android 上层是怎么运作的都了然于胸；FrameWork 层的任何问题也拦不住你的脚步了；不过这个阶段，仅仅是了解了Android 系统Framework 层的原理，对于怎么写代码，对于语言本身，对于Android 系统底层的原理依然很迷惑，没事，已经看到了光了，一步一步来。 除了Android 源码值得读的，还有第三方的开源库也是值得一读的，有的开源库甚至比官方的更加好用，比如像我们常用的Retrofit，OkHttp，Picasso，Volley，EventBus，Dagger，我们基本上都能熟悉使用，Trinea 和一些大牛在Github 做的一个项目，专门分析了开源项目，我们可以参考着来看。 android-cn/android-open-project-analysishttps://github.com/android-cn/android-open-project-analysis 我觉得新手阅读源码的姿势还是有点弱，当然站在巨人的肩膀就会事半功倍，所以看看大牛写的文章还是很~(≧▽≦)/~涨姿势的。 了解编译原理等CS基本知识 推荐一下R 大的书单吧：http://zhuanlan.zhihu.com/hllvm/20130808。当然由于定位不一样，我肯定不会像他一样专门搞搞基语言虚拟机（主要是我没那个水平！），仅供参考；我自己目前看的几本书如下：《编程语言实现模式》《深入理解计算机系统》《SICP》《编译器设计》；然后由于在学Haskell，所以在追github上一个项目，sdiehl/write-you-a-haskell ；具体怎么做还是边走边瞧。后面的我也不敢说太多，目前打算是希望深入了解Linux内核，以前看过《深度探索Linux 操作系统:系统构建和原理解析》；打算看《深入Linux内核》《Unix环境高级编程》；只要越过了浮躁期，其实目标还是很明确的；知道自己该学习什么，也知道大致该怎么做；感觉自己走在正确的路上，越来越接近那个目标，每天都充满希望。 参考 Android开发高手进阶教程http://blog.csdn.net/column/details/androiddept.html 怎样的Android开发毕业生可以算达到优秀的水平？https://www.zhihu.com/question/39009692 android学习路线：如何成长为高级工程师http://blog.csdn.net/singwhatiwanna/article/details/42343847 android-cn/android-open-project-analysishttps://github.com/android-cn/android-open-project-analysis/ 本文部分章节参考来自weishu 在知乎上面的回答，如果你觉得本文不错，也可以点击链接可以给打点个赞，在这里多谢了。 Android 程序猿如何继续深入的研究技术层的知识？ - weishu 的回答 - 知乎https://www.zhihu.com/question/37549641/answer/83217748 本篇文章能够完成，参考了weishu，邓凡平老师，kaedea，Trinea，当然也看了很多博客，在这里特别感谢他们，本人资历尚且有限，写过过程中难免会有疏漏，还请见谅。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://tikitoo.github.io/tags/Android/"},{"name":"指南","slug":"指南","permalink":"http://tikitoo.github.io/tags/指南/"},{"name":"Guide","slug":"Guide","permalink":"http://tikitoo.github.io/tags/Guide/"}]},{"title":"Android 开发有哪些新技术出现？","slug":"What-new-technologies-have-android","date":"2016-01-29T14:45:25.000Z","updated":"2016-01-30T04:25:48.000Z","comments":true,"path":"2016/01/29/What-new-technologies-have-android/","link":"","permalink":"http://tikitoo.github.io/2016/01/29/What-new-technologies-have-android/","excerpt":"","text":"作为一个程序员，应该养成持续学习的能力，随时关注新技术，有时候做起事来会让你事半功倍的效果。之前在知乎上看到下面这个问题，觉得很受用，所有就总结了大牛们的回答，也跟着大牛们的脚步，看看有哪些新技术，也跟着学习学习，涨涨见识。 本文参考@Android 笔记 在知乎的回答：Android 开发有哪些新技术出现？https://www.zhihu.com/question/32037895 Android StudioAndroid Studio 是Google 官方推出的全新的Android 开发的IDE，自2013 年发布，目前最新稳定版是1.5。目前Google 官方放弃 Eclipse 的支持，加上Android Studio 普及。AS 虽然不算新，但是对 Android Studio 这个软件的更新速度快的惊人，有大量的新功能发布。例如支持很多注解代码提示注解、Live Code Template、支持自动生成 Parcelable 实现等等，作为开发者，持续关注这个更新列表：tools.android.com/recent，一定会让你的写代码的生活更加美好。而且Android 1.0 之后大量的新特性，让我们的开发更便捷，比如Vector Asset，Theme Editor，Gradle 编译速度大幅提升，Android Studio 2.0 的Install Run 实现的实时运行功能。 Material Design 设计Android 4.0 的Android Design 留下了诟病，也让Google 下定了决心，在5.0 推出了Material Design 全平台设计语言。它对于每一个点击，每一次滑动都有设计规范。对于设计师和程序员都是值得一看的。 Material Design 设计规范：https://design.google.com/ Design 设计支持库如果说Material Design 是设计师看的（其实程序员也应该看）。那么的Design 设计支持库，也使得Material Design 设计在Android 中也慢慢实现了。也让没有设计感的程序员也可以制作出惊艳的App。比如Navigation View（侧滑栏），Floating Action Button（悬浮按钮），Snackbar，TabLayout，CoordinatorLayout，App Bar，nestedscrollview。 http://android-developers.blogspot.com/2015/05/android-design-support-library.html ##Sketch 3这是一个专为设计移动端 UI 的设计工具，作为开发者，不用懂那么复杂的 PS 使用，也可以做非常专业设计：https://designcode.io/sketch RecyclerViewRecyclerView的几大特性： ViewHolder 模式：在ListView 中需要手动添加ViewHolder 模式，而且不会重用之前的View，RecyclerView默认实现了重用，让绘制View 更加高效。 LayoutManager ：设置布局，就可以实现单列表，GridView，瀑布流的效果。 Item Decoration：自定义各种分割线 Item Animator：设置各种炫酷增删动画 RecyclerView 对于不同类型可以很容易添加。现在很多App 的首页很复杂的内容，样式不一样，使用RecyclerView 很容易解决，还有底部加载更多也很容易实现。 Kotlin作为 Android 领域的 Swift，绝对让你如沐新风。抛弃沉重的 Java 语法，Kotlin 融入了很多现代编程语言的思想，作为开发者，接受新的语言，了解新语言的发展趋势，更有利于开阔你的思路和加深对语言的理解。在 Android 开发上，使用 Kotlin 并不会让你付出什么代价，为什么不来试试？ FrescoFresco是Facebook最新推出的一款用于Android应用中展示图片的强大图片库，可以从网络、本地存储和本地资源中加载图片。其中的Drawees可以显示占位符，直到图片加载完成。而当图片从屏幕上消失时，会自动释放内存。 React NativeReact Native 结合了 Web 应用和 Native 应用的优势，可以使用 JavaScript 来开发 iOS 和 Android 原生应用。在 JavaScript 中用 React 抽象操作系统原生的 UI 组件，代替 DOM 元素来渲染等。 跨平台一直是程序员的梦想，而且移动应用的跨平台解决方案也很多，因为 Facebook 的参与和力推，让这个解决方案带上了光环。第一个用 React Native 开发的 App 已经在 Google Play 上架 Facebook 广告管理工具，目前iOS 和Android 版本都已发布，最新版为0.5。 Dagger 2Dagger 2 是Google 主导开发的依赖注入框架，它是基于Dagger 1（由Square 主导开发），利用生成和写的代码混合达到看似所有的产生和提供依赖的代码都是手写的样子，极大减少了使用者的编码负担，也更便于调试，Google 声称提高了13 % 的性能，。 MVP我们都知道MVC 模式，MVP 就是基于MVC 的模式上的一个演化版本。在MVC模式中，Activity应该是属于View这一层。而实质上，它既承担了View，同时也包含一些Controller的东西在里面。随着项目的迭代更新，这对开发很不友好，耦合度也原来越高，项目越来越难维护，而MVP 就是解决这样的痛点。把Activity的View和Controller抽离出来就变成了View和Presenter。 DataBinding MVVMDataBinding 即数据绑定，在前端的框架有很广泛的使用，比如像AngularJS，就支持双向绑定。所谓MVVM，像Activity，Fragment，View 都属于View 这一层；Model层主要负责数据相关部分，可以从数据库或者网络获取；ViewModel主要是把Model转换为View 可以呈现的东西，例如把一个Date 类型转化为格式化后的String，也就是将前面两者联系在一起的对象，在Data Binding 支持下，会根据layout 文件名自动生成一个相对应的Binding（比如activity_main，对应生成MainActivityDataBinding 对象），数据绑定在Layout文件中XML标注。在Google I/O 2015上，伴随着Android M预览版发布的Data Binding 兼容函数库改变了这一切。而在Android Studio 2.5 的预览版，Data Binding 在XML 中也终于有了代码提示功能。 RxJava/RxAndroidRxJava一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库。用简单的一个词来介绍就是“异步”。它提供了基于Observable（观察者） 序列实现的异步调用及基于事件编程。它扩展了观察者模式，支持数据、事件序列并允许你合并序列，无需关心底层的线程处理、同步、线程安全、并发数据结构和非阻塞I/O处理。它支持Java5 及更高版本，并支持其他一些基于JVM的语言，如Groovy、Clojure和Scala。而且他能和Retrofit 更好的结合使用，也有相对应的RxBus 等框架结合。 Espresso 2.0近些年，随着Android社区的成熟，出现了诸如Robotium，Robolectric等的优秀测试框架。而Google也在近期推出了自己的UI测试框架Espresso。Espresso 是一个提供了简单 API 的用于 Android App UI 测试的测试框架。最新的 2.0 版本发布后已经可以在 Android Support Repository 中下载了，那么在项目中集成它就方便多了。它的API 很小，对外扩张开放，测试跑起来那是相当的快，对Gradle 和Android Studio 支持。 BaasBaas 又称mBaas，全称叫Backend as a Service（后端作为一种服务）， 怎么说呢，为移动应用开发者提供后端服务；作为一个移动应用开发者（Android &amp; iPhone），除了开发应用程序，还要做后台的服务器端，当然，大多移动应用开发者并非都懂后端开发， 这让一个应用应用开发者开发一款应用不容易，然而有了Baas，开发者就可以不用管后端开发了，Baas 提供商，提供了我们最常用的功能，比如数据存储，应用分析，IM 等功能，让开发者把主要精力放在应用本身，大大提高了效率。当然也不一定是移动应用开发者，当然也可以Web 开发，当初Baas 主要是为了解决移动应用开发者的后端服务问题，Baas 也提供其他的服务；国外类似Parse，Firebase，国内像LeanCloud 都是提供这样的服务。 App Indexing我们都知道网页是一个一个超链接相连的，然而在移动互联网时代，每个App 里的数据就想信息孤岛，App Indexing 就是要打破这样的尴尬，只要你在App 实现App Indexing 功能，你的App 里的数据，就会出现在Google 的搜索结果中，尤其是出海的App，这个功能尤其重要，据说Google 打算实现在网页中直接安装App。 参考 Android 开发有哪些新技术出现？ android - what are recycler view advantages compared to listview - Stack Overflow 关于Android的Data Binding技术 - 泡在网上的日子 在安卓上使用RxJava - ImportNew Android-Espresso测试框架介绍 - bboyfeiyu/android-tech-frontier Tikitoo 的公众号，更多分享…","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://tikitoo.github.io/tags/Android/"}]},{"title":"每周阅读清单：程序员修炼，兴趣，TED","slug":"reading-list_programmer_interest_ted","date":"2016-01-23T13:43:30.000Z","updated":"2016-01-26T14:56:36.000Z","comments":true,"path":"2016/01/23/reading-list_programmer_interest_ted/","link":"","permalink":"http://tikitoo.github.io/2016/01/23/reading-list_programmer_interest_ted/","excerpt":"","text":"不知不觉快要过年了，估计大家也都比较忙吧。这一周也上了六天，刚好今天你晚上有点空闲时间，就来总结这周工作和学习发现的好东西和好文章，来分享给大家。我平常获取技术和文章大都在微博，微信，遇到好的博客都会使用Feedly 来订阅，遇到好的文章来不及看都会放在Pocket 来看。今天阅读清单也到了第二期了，也希望能给大家一些帮助。 技术文章 Android 周报（第 30 期）这个是@Android 笔记 维护的，推荐了性能优化，APK 瘦身等其他方面的文章。有空大家可以去看看，跟着大牛们涨涨经验。 四种常见的 POST 提交数据方式可能服务端和前端对这些特别熟悉，做客户端也应该去了解 Post 的提交方式，application/x-www-form-urlencoded，multipart/form-data，application/json，text/xml。 Git 工作流程阮一峰老师写的Git 工作流程，讲了Git flow，Github flow，Gitlab flow 三种工作流程，Git flow 实用与我们工作中，Github flow 适用于我们开源项目中，Gitlab flow 将两者综合起来。 如何提升你的能力？给年轻程序员的几条建议一个八年工作经验给年轻程序员的建议与经验。打造你的工具箱，高效的开发环境。开阔你的视野，构建你的技术体系。重视沟通能力的培养。累积你的人脉。寻找发挥你才华的平台。 互联网 微信应用号将会对开发者有哪些影响？微信应用号，什么鬼？难道又是一个Hybrid App？让我们期待吧。网上也有很多讨论的文章，在这里就不多说了。 人文 什么是【真正的】兴趣爱好？以及它有啥好处？其实我们所谓自己感兴趣的东西，其实不过是随便说说，也可能是说给人听的。看了这篇文章，你会很受启发。有条件科学上网的可以自己使用Google 搜一下吧。 人类创造未来的思想先锋：这些 TED 演示深深震撼着我们作者作为一个中国的在美国的留学生，自己也见证了TED 的舞台上这么多年让人惊叹的科技和事情。利用仿生学让下肢残废的人重新站立起来，甚至让舞者重新站在舞台上。乔布斯在TED第一次展示他的Macintosh 电脑。 Sun 公司最先介绍了Java 语言，现在已经是编程语言的中流砥柱。 Tikitoo 的公众号，更多分享…","categories":[],"tags":[{"name":"阅读清单","slug":"阅读清单","permalink":"http://tikitoo.github.io/tags/阅读清单/"}]},{"title":"Android 中WebView 的使用","slug":"android-webview-note","date":"2016-01-05T15:39:41.000Z","updated":"2016-01-20T13:17:34.000Z","comments":true,"path":"2016/01/05/android-webview-note/","link":"","permalink":"http://tikitoo.github.io/2016/01/05/android-webview-note/","excerpt":"","text":"我们都知道Webview 是用来加载网页的，底层使用Webkit 来实现的。首先要在清单文件里注册网络请求权限 1&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt; 如果使用外部程序（浏览器）打开 123Uri uri = Uri.parse(\"http://www.example.com\"); Intent intent = new Intent(Intent.ACTION_VIEW, uri); startActivity(intent); 如果使用WebView 来打开123WebView webview = new WebView(this);setContentView(webview);webview.loadUrl(\"http://www.zhihu.com\"); // notice http:// 加载网页一共有四种不同的方法，基本上一看就一目了然。可以使用字符串或者网页，设置MimeType 和编码。 1234void loadData(String data, String mimeType, String encoding)void loadDataWithBaseURL(String baseUrl, String data, String mimeType, String encoding, String historyUrl)void loadUrl(String url)void loadUrl(String url, Map&lt;String, String&gt; additionalHttpHeaders) 之前遇到过一个问题，比如我们有个Base Url 后面的参数需要动态来传，我们可以使用Uri 的构造器来拼凑（当然你也可以手拼字符串）。 123456mUrl = new Uri.Builder() .encodedPath(BASE_URL + \"/user\") .appendQueryParameter(\"age\", age) .appendQueryParameter(\"sex\", sex) .appendQueryParameter(\"token\", token) .build().toString(); 设置一些高级的属性（比如：JS）当WebView 第一次初始化，会获得一组默认值。 我们可以使用WebView.getSettings() 方法来获取Settings 对象，来自定义设置一些属性。当WebView 被摧毁，调用WebView.getSettings()，将会抛出IllegalStateException。 12WebSettings webSettings = myWebView.getSettings();webSettings.setJavaScriptEnabled(true); 一般会有set 和get 两组方法，有设置JS，缩放，字体大小，use-agent，保存表单数据等等其他属性。 监听状态1myWebView.setWebViewClient(new WebViewClient()); 我们可以继承WebViewClient，重写下面的一些方法。 123boolean shouldOverrideUrlLoading(WebView view, String url) // 可以重写void onPageStarted(WebView view, String url, Bitmap favicon) // 初始化一些数据void onPageFinished(WebView view, String url) // 网页加载完成 shouldOverrideUrlLoading() 方法，我们可以设置404 页面，在js 中传输数据，在这里捕获，特殊处理。例如：在网页中打开App，就可以处理。 除了上面常用的，还有拦截请求，获取的错误，重写键盘事件，认证等等。 我们 也可以使用WebChromeClient，加载WebView 的一些属性，比如alert，prompt，进度条，可以让WebView 更加丰富。 和JS 交流在Java 代码中调用JS 12String value = \"javascript:call()\";mWebView.loadUrl(value); 除了上面这样，我们也可以给方法传出参数，进行计算。在JS 代码中调用Java 123function sumToJava(num1, num2) &#123; window.android.onSumResult(num1 + num2);&#125; 1234@JavascriptInterfacepublic void onSumResult(int result) &#123; WebViewActivity.this.showToast(\"result: \" + result);&#125; 需要注意的是@JavascriptInterface 需要将TargetSDK 设置为17 或者更高，而且也有安全问题。 1234567891011121314151617&lt;script type=\"text/javascript\"&gt; function showAndroidToast() &#123; window.android.showToast(\"Hello Android!\"); &#125; function save() &#123; alert(\"3242\"); &#125; function call(num) &#123; alert(num); &#125; function sumToJava(num1, num2) &#123; window.android.onSumResult(num1 + num2); &#125;&lt;/script&gt; 12345678mWebView.setWebViewClient(new WebViewClient());mWebView.addJavascriptInterface(new WebAppInterface(this), \"android\"); // js 中的名字mWebView.setWebChromeClient(new WebChromeClient() &#123;&#125;);String save = \"javascript:save()\";String call = \"javascript:call(\\\"\" + \"content\" + \"\\\")\";call = \"javascript:sumToJava(1, 2)\";mWebView.loadUrl(call); 如果我们不适用@JavascriptInterface，可以使用WebView 重写shouldOverrideUrlLoading(WebView view, String url)，将发送的链接捕获处理。 12345&lt;script&gt; function openApp() &#123; window.location = open_app://com.android.camera; &#125;&lt;/script&gt; 参考 【原创】【源码分析】Android平台webkit组件java层代码分析 - - ITeye技术网站 Building Web Apps in WebView - Android Developers WebSettings - Android Developers Android中Java和JavaScript交互 - 技术小黑屋 深入讲解WebView——上 - 开源实验室-张涛 深入讲解WebView——下 - 开源实验室-张涛 Android WebView开发问题及优化汇总 - 书呆子精神院 Android中JavaScript和Native之间的Bridge","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://tikitoo.github.io/tags/Android/"},{"name":"WebView","slug":"WebView","permalink":"http://tikitoo.github.io/tags/WebView/"}]},{"title":"Android 开发者必备的书单","slug":"android-book","date":"2016-01-02T13:39:41.000Z","updated":"2016-01-26T14:56:30.000Z","comments":true,"path":"2016/01/02/android-book/","link":"","permalink":"http://tikitoo.github.io/2016/01/02/android-book/","excerpt":"","text":"大家好，最近一段时间，Android 方面的书籍可谓是百花齐放，这几本书的作者都是在一线互联网公司奋斗的工程师，他们把多年的工作经验，身心耕植，汇聚成一本书。作为菜鸟的我们，只有一睹大神的风采了。所以借这个周末，我也列举了一些书，作为一个Android 开发工程师，这些书都是不可多得的好书，书中知识迟早是要掌握的。 我们都知道开发Android App 是用Java 语言的，当然你也可以使用其他语言来开发Android，当然主流还基本上都是用Java，所以先来给大家推荐几本Java 书籍，这几本书籍不必都看完采取学习Android，但随着学习的深入，就有点捉襟见肘了，所以要提升Java 的技能的。 《深入浅出Java》作为入门书籍，深入浅出系列，一直是浅显易懂，所以作为入门太合适不过了。 《Think in Java （Java 编程思想）》如果你是初学者，可以跳过这本书，但你稍微有点经验，这本书就逃脱不过了，当你觉得Java 水品想要从菜鸟向大神进阶，那就拿这本书自虐吧。 《第一行代码》郭霖大神的书，之前自学，看他的博客也使受益匪浅。书中讲述了Android 中基本的内容，比如四大组件，数据存储，网络请求，数据库等。如果你想快速入门Android，那么这本书你不该错过。 《Android Programming: The Big Nerd Ranch Guide (2nd Edition)（Android 编程：权威指南）》这本书是国外知名培训机构Bignerdranch（我想说，这才叫培训机构，国内的xx，我就无力吐槽了） 出的入门书籍，书中以项目为主题，从最项目相关的知识点开始，循序渐进，从最简单的，慢慢来提升。 《Head First Android Development（深入浅出Android 开发）》又一深入浅出系列的书，不过这本好像还没有翻译成中文，书中的内容也是很基础的，和《第一行代码》中讲的内容重合度很高，如果你英文不错，你可以来尝试来读。 《Android 群英传》作者名宜生，在群里被我们唤作医生，不过医生的博客何在慕课网的教学视频，都是非常值得读的，他出的书，也是非常值得看的。作为进阶书，书中不仅将的新手比较难以掌握的View 绘制，性能优化，也讲述Android Studio 的使用和Android 5.0 的新特性。 《Android 开发艺术探索》作为新手，从写UI，使用框架，写多了就像小学生交作业一样，也仅仅停留在了只会使用的层面上，那么这本书，则带你去更深次的去理解Android 开发，让你开发更加得心应手，书中讲解View 的工作原理和事件体系，性能分析，深入理解动画，JNI 等等。 《Android 设计模式源码分析》在Android 中，总有一些代码使用感觉很熟悉，比如像AlertDialog，对的，在Android 中一样有大量使用设计模式。这本书深入分析Android 源码中使用到的设计模式。 《Android 开发精要》作者是豌豆荚Android 负责人范怀宇，书的内容， 从Android 源码中抽次剥茧的“精华”和“要点”，虽然书本不是特别厚，但拿着这本书就像武功宝典，书中的内容吃透了，你就练就了盖世神功。 《App 研发录》这本书相对于其他书，这本显得更加特别独特，其他都是讲的纯Android 技术，这本书从更加宏观的角度，讲怎么规范开发，让开发更高效，比如重构，封装网络库，还分析了一些经典的场景，崩溃分析，持续集成（CI）等等。市面上的书多如牦牛，能发现一本好书也是不易的。上面的书，也希望能为大家Android 开发有一些帮助，当然了，书中的有些内容，随着时间的迁移，书中的内容也会变得落后，所以除了看书，我们也应该时刻关注Android 官方的博客和Android 发布的新版本，还有关注微博上的大牛和订阅一些头条日报来学习新技术。 本文作者：Tikitoo本文出处：Android 开发者必备的书单转载请在开头注明作者详细信息和本文出处。 欢迎关注我的微信公众号，分享Android 开发和互联网内容。微信号：AndroidMate公众号：安卓同学","categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://tikitoo.github.io/tags/android/"},{"name":"书单","slug":"书单","permalink":"http://tikitoo.github.io/tags/书单/"}]},{"title":"2015 年——懵懵懂懂，跌跌撞撞","slug":"2015-summer","date":"2015-12-26T05:35:16.000Z","updated":"2016-01-07T14:29:08.000Z","comments":true,"path":"2015/12/26/2015-summer/","link":"","permalink":"http://tikitoo.github.io/2015/12/26/2015-summer/","excerpt":"","text":"如果说2014 年是迷茫，那么2015 年就是懵懂，我希望2016 是成长。 读过的书苏东坡传从零到一硅谷百年史暗时间简明HTTP 指南HTTP 权威指南（未完）Head First Java第一行代码 看过的电影宋家王朝港囧辛亥革命天若有情我是路人甲饮食男女饮食男女（新）重返二十岁罗马假日西西里的美丽传说四大名捕四大名捕2太平轮上卧虎藏龙大上海一个人的武林庞贝末日我想和你好好的分手合约第一次天堂口一路惊喜心花路放宫锁沉香钟馗伏魔：雪妖魔灵模仿游戏重庆森林太极太极2天堂电影院美丽人生 看过的电视剧琅琊榜好大一个家京华烟云 发现书没有读过几本，电影几乎快达到每周一部了，电视剧就是感觉很好的才会去看。双十一买了很多书都还没有看多少，不过相对于以前还是好一点，所以与其无聊随便看东西，不如提前把好东西都预备好，觉得自己没事就来看吧，而不是看到好东西，就想过眼云烟一样。 工作今年有两份工作 琥珀天气我自学Android 之后的第一份工作（实习），公司使用很少而且很老的开源库，没有自定义View，代码混乱。并不是说我离开了吐槽公司，我在这个公司整天加班，收获多少，住的地方离得很远，整天劳累我也无力做其他的事情。当然我也并没有多少努力，最后的结果就是我被辞退。第一份实习结束，我又开始找工作了，感觉也挺难找的，一份实习并没有为我加分多少，虽然面试了不少，但是在Java 基础，Android 基础上还是有欠缺，有的公司一上来就给一道算法题，就没有了然后了。 绿葡科技就是我现在的工作，是一个外包公司，也不单单是一个外包公司，还有自己的合作的项目（就是以后的升级迭代都负责），刚开始的一两个项目，进步还是挺大的，也熟悉的逻辑，使用很新很成熟的开源项目和框架，自己代码的质量也有所提高，最近的一段时间相对于比较闲，自己好像也懒散下来了。老大作为技术，这一点对做技术还是会好一点，至少技术这边不会被边缘化。自己做技术也有自己的学习空间。放任的管理就是只能自律，自我学习。 社交微博：粉丝已经达到了2.5k。上半年浪费在了很多时间，下半年理性了很多，别人的微博，要有自己的判断力，然后转发。鸡汤类的基本上都取消了关注。简书：2k，因为一篇关于大学生的App，被简书主页推荐了，余温一直持续到现在，粉丝一直在涨。以后非技术文章还是会在简书上写。知乎：1.1k，也是一两个回答，都有一千左右个赞，现在回答少了，看的也少了，知乎的东西现在受影响的也比较多，所以就是少上。微信公众号：1.1k，微信现在联系人有两百个人，有一般是不认识的吧。有公共号关注者加我的，也有我加别人的，看到别人的生活，对自己也是一个激励吧。Github：几十个关注。这一年基本上什么都没有。 生活多了一台魅蓝Note 2：上一部手机用了两年多，基本也废了。这台也让我体验很多的App，手机作为常用的工具，也不会天天抱着它。Kindle 低配版，一直用它读了几本书，几百块不多读几本书，都亏了。网易云音乐：这是几年发现最好的东西之一吧，烦躁的时候，听听歌，让自己静下来吧。搬了一次家，不太顺利，不过现在环境也适合一个人静静的思考，做一些自己喜欢的使用。现在也偶尔做饭，发现做饭食材的新鲜度和火候都很重要。原来成长就是与自己相处，和自己相处好了，看待四周也就会好了许多。原来有些东西再也回不去了，有些事情，你也不得不做。 认知，眼界曾经自己认为很崇拜的人，正确的东西，后来发现不是那样。曾经感觉谷歌什么都很好，后来才发现，谷歌也变成了一个大公司，很多产品并不是很好，做的很多实用并不是让人很理解。三观：孔老夫子的儒家思想，几千年后一直在中国人的心中一直扎根生长，三从四德，大男子主义，女人被这个时代弱化等等。我们口口声说男人比女人强，其实都是儒家思想的表现。要么赚很多很多的钱，要么读好多好多的书，要么让自己涨涨阅历，见识。不要让自己局限在当前的周围人中，看看国外发生了什么，看看国外的同行人在做什么，这对以后的选择，会有很多的帮助。如果你认为一个很值得假如的公司，不如提早观察观察吧，这个公司的人，产品，用户，投资人，增长速度，是否快速迭代，创始人整天在做什么，其实选公司就是在追随常创始人。","categories":[],"tags":[{"name":"总结","slug":"总结","permalink":"http://tikitoo.github.io/tags/总结/"},{"name":"生活","slug":"生活","permalink":"http://tikitoo.github.io/tags/生活/"}]},{"title":"开发者必备的网站","slug":"developer-website","date":"2015-11-02T13:43:09.000Z","updated":"2016-01-26T14:59:34.000Z","comments":true,"path":"2015/11/02/developer-website/","link":"","permalink":"http://tikitoo.github.io/2015/11/02/developer-website/","excerpt":"","text":"前两天是1024 程序员节，也祝大家过得愉快。本来是想提前写的，一直拖到现在（拖延症致死呀)，所以就大家多等了几天，前两天我写的文章《Android 开发者必备的网站》，今天为大家推荐一些开发者必知的网站，除了一些基本的技术网站，还有一些交流的网站，不多说那就进入正题吧。 我觉得，作为程序员，开发者，科学上网应该就像人的尊严一样，没有它，你写代码都会浑身不舒服。 Google 不管是新手程序员还是老手程序员，工作和学习过程中都会遇到一些问题，那么遇到问题利用Google 搜索估计是最快解决方案。而且Google 的结果，让你很容易解决问题。关键是Google 不做恶，没广告。 Github 作为全世界最大的同性交流网站（代码托管平台），上面有各种大牛，作为新手的我只能默默地去撸大牛的代码，期待能和大牛的差距一步步减少。除了学习之外，你也可以利用闲暇的时间来来将自己的开源项目放在上面，从侧面也是对自己的宣传，对找工作也有帮助。类似的有国外的Bitbucket，gitcafe，coding.net 等等。 StackOverflow 最大的技术问答网站，Google 搜索技术问题，结果很大的比例都来自StackOverflow，而且可能我们折腾好久的问题，大牛的一句话都点中要害。 HackNews Hacker News 是一家关于计算机黑客和创业公司的社会化新闻网站，你可以讲自己写的博客或者对一些业界新闻拿出来来讨论。就算自己在上面多看看也是很涨见识的。而且我注意到，国外的很多人的博客都不留评论框，一般写完文章，就会放在HackNews 讨论。国内也有类似的网站。Startup News。 InfoQ InfoQ 是一个面对开发的服务网站，而他的自我介绍：促进软件开发领域知识与创新的传播。在上面你会看到很多专业人士分享的专业知识，他们分享的东西，可能是一般开发者很难接触到的。由InfoQ 主办的Qcon，ArchSummit 大会，也是非常值得一去的。 V2ex 我觉得V2ex 算是一个程序员吐槽，交流的网站。反正上面由好多好多程序员。而且有个专栏叫《酷工作》，反正由好多求职和招聘的。 SegmentFault SegmentFault 是一个面向开发者的技术问答社区，你可以在上面问答，写博客，线下交流活动等等。 开源中国 开源中国是目前中国最大的开源技术社区，为IT 开发者提供了一个发现、使用、并交流开源技术的平台。 技术博客 我们在学习过程中，很多时候都是看别人的技术博客来成长的，当然技术博客网站由很多。比如CSDN，cnBlogs，51CTO，itEyes 等等。 Mooc Mooc 翻译为中文叫做在线网络公开课，Mooc 的愿景是让那些没有机会接受正式教育的人能接受教育，主要做技术的Mooc 也有很多。比如像国外的coursera，edx，udacity，国内由像慕课网，极客学院等等。 开发者服务网站 这个标题可能叫可能叫的不太准确，稀土掘金：挖掘最优质的互联网技术。它主要邀请一些业界比较资深的开发者，作为联合编辑来推荐文章，文章质量有了保证。开发者头条：程序员的首选阅读分享平台。博乐在线：一个专注于IT互联网的聚合分享站点。当然其他的也很多啦，比如像ImportNew，酷勤网等等。 本文作者：Tikitoo本文出处：http://www.jianshu.com/p/874ff12a4c01转载请在开头注明作者详细信息和本文出处。 欢迎关注我的微信公众号，分享Android 开发和互联网内容。微信号：AndroidMate公众号：安卓同学","categories":[],"tags":[{"name":"网站","slug":"网站","permalink":"http://tikitoo.github.io/tags/网站/"},{"name":"website","slug":"website","permalink":"http://tikitoo.github.io/tags/website/"}]},{"title":"Android Studio有哪些非常好用的插件？ - Tikitoo 的回答 - 知乎","slug":"android-studio-the-very-useful-plugins","date":"2015-09-27T11:49:59.000Z","updated":"2015-09-27T12:01:50.000Z","comments":true,"path":"2015/09/27/android-studio-the-very-useful-plugins/","link":"","permalink":"http://tikitoo.github.io/2015/09/27/android-studio-the-very-useful-plugins/","excerpt":"","text":"我要回答了。你们只负责点赞吧。 上面有好多大牛的推荐有很多不错。 Android ButterKnife Zelezny不想写findViewById() 就用ButterKnife，ButterKnife 的注释不想写就用这个插件。 Genymotion用了Genymotion 的虚拟机再也不用系统带的虚拟机了，配合这个插件，可以在Android Studio 直接打开虚拟机。 GsonFormat把 JSON 字符串直接实例化成类，每次想想写Model 类想死的心都有了，有了这个插件Model 类也不用写了。 Fir.im upload使用Fir.im 内测平台很方便有木有。但每次都把文件使用网页上传，不符合我们这么高大上的行业。有了这个插件，上传只用添加token，第一次选择生成的apk 文件的路径，就可以自动上传了。具体教程请看Fir.im 的官方教程。 更新日志 - fir.im 回归，上线 Android Studio 插件 Markdown比如我们要写README 的时候，或者其他文档的时候，使用MD 的插件可以预览效果。 CodeGlance在编辑代码最右侧，显示一块代码小地图。 Android Material Design Icon Generator自动生成不同尺寸的Material Design Icon。 PS: Android Studio 1.4 Preview 1 Canary Channel 中添加了Vector Asset 功能，你可以自动添加Material Design Icon 或者自己自定义的SVG 文件，生成VectorDrawables 文件，使用直接引用Drawable 文件。 参考 The best Android Studio plugins judasn/IntelliJ-IDEA-Tutorial · GitHub 本文作者：Tikitoo本文出处：Android Studio有哪些非常好用的插件？转载请在开头注明作者详细信息和本文出处。 欢迎关注我的微信公众号，分享Android 开发和互联网内容。微信号：AndroidMate","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://tikitoo.github.io/tags/Android/"},{"name":"Android Studio","slug":"Android-Studio","permalink":"http://tikitoo.github.io/tags/Android-Studio/"}]},{"title":"Android Studio live templates 的使用","slug":"android-studio-live-templates-md","date":"2015-09-13T10:22:43.000Z","updated":"2015-09-13T11:05:58.000Z","comments":true,"path":"2015/09/13/android-studio-live-templates-md/","link":"","permalink":"http://tikitoo.github.io/2015/09/13/android-studio-live-templates-md/","excerpt":"","text":"在Android Studio 中，我们会发现有时候我们有一些打出一些拼写就会出来一些东西。 比如：psvm123public static void main(String[] args) &#123;&#125; 那么这个是怎么实现的呢？ 其实Android Studio 中有一个叫Live Templates 的东西。在设置中直接搜索就可以找到。默认的中，系统已经有很多很方便的配置。当然我们也可以自己来编辑。 Bignerdranch 有一篇文章可以来了解看看 Android Studio Live Templates | Big Nerd Ranch 更多的详细介绍，可以上IDEA 的官方文档来仔细查看 Live Templates 更赞的是，开发大牛把提前配置好的文件放在Github 上了，我等菜鸟就慢慢享用吧。 keyboardsurfer/idea-live-templates 然后将文件放在下面的文件夹下即可。 其实还是有点懒，以后有空写一篇详细的教程吧。","categories":[],"tags":[{"name":"Android Studio","slug":"Android-Studio","permalink":"http://tikitoo.github.io/tags/Android-Studio/"}]},{"title":"写给Android 开发的入门教程","slug":"android-developer-tutorial","date":"2015-08-23T06:45:34.000Z","updated":"2016-01-26T14:59:54.000Z","comments":true,"path":"2015/08/23/android-developer-tutorial/","link":"","permalink":"http://tikitoo.github.io/2015/08/23/android-developer-tutorial/","excerpt":"","text":"之前在知乎上回答的问题——《初学者学习 Android 开发，有什么好网站推荐？》，就挑了一些大家公认比较好的资源，所以今天就把它整理成博客了，再好好整理一些好的资料分享给大家。其实我觉得，相对于稍微有点经验的人来说，初学者更需要指导，因为初学者没有好的知识体系，所以会走不少弯路，所以我就以我的经验，和在微博，论坛上大家公认的资料整理出来，也希望能帮到大家。 Java O’Reilly：Head First Java（中文版） Mars 的Java4Android 其实我倒觉得，初学者可以读一些浅显易懂的书，在以后的学习中，可以再加以巩固，可以读一些深一点的书。 Android 书籍 郭霖《第一行代码》 Brian Hardy，Bill Phillips《 Android编程权威指南》 这两本特别适合初学者开入门的。不管是我自身还是从论坛，微博上，对它们的评论都不错。 Android 教程 Android 官方入门指南 序言 | Android官方培训课程中文版(v0.9.4) Home · codepath/android_guides Wiki · GitHub 对于教程，我的观点是能读官方，就不要读其他，第二个是官方指南的中文版，算是中文翻译中比较好的了。而Codepath 的入门指南，也可以和官方相比，也是不逊色的，相比较官方的，它的教程更具有实战意义，每一个都是一个小Demo，做完会让你很有成就感。 Android 视频 Mars——Android 开发视频教程 黎活明——8天快速掌握Android视频 慕课网——Android 开发视频 极客学院——Android开发,安卓开发教程 这些你都不知道，就有点孤陋寡闻了。 Android 开发工具 inferjay/AndroidDevTools对于不能科学上网来说，可以使用这里提供的国内镜像来下载各种开发工具和SDK。 Android Studio如果之前还有纠结的话，那么现在你还不使用Android Studio，就说不过去了。Bug 也变得少了，性能优化，版本迭代也特别快。对于以前没有使用过AS 的人来说，当然学习曲线也是比较陡峭的。我推荐两篇文章可以来入门，以后遇到的问题，可以到时候来搜索解决。 Stormzhang - Android Studio系列教程 Tikitoo - Android Studio 入门指南 Android 开源App Search Android - Google Samples谷歌官方会经常推出一些Android 新技术的Demo，比如每年的IO App 等等。 Android Apidemos下载SDK 之后，会在 &lt;sdk-insall-folder&gt;/samples/ 中查看系统自带的好多Demo。 有没有适合 Android 开发初学者的 App 源码推荐？知乎上有好多大牛推荐的，也可以值得关注一下，找到适合自己的来练练手。 Android 学习经验分享还有一些大牛对入门者的入门文章，我觉得对于初学者来说，会避免不少弯路。 StormZhang - Android学习之路 Tikitoo - 我是如何自学Android，资料分享 Drakeet - 我推荐的 Android 基础学习路线 futuriceandroid-best-practices - Github 总结作为一个程序员，学会科学上网应该是一种本能，这样就会减少很多不必要的麻烦。 要善于利用搜索引擎，StackOverflow。使用英文关键词搜索，你遇到的99% 的问题，别人都会遇到。 要时刻关注Android 的最新动态。比如Android 的官方博客，还有各种Android Weekly，在微博，知乎关注一些Android 牛人，看他们分享的东西和回答的问题，要让自己与时俱进，才不会被淘汰。 加一些QQ 群，有不会可以问问，相互交流。 Alway Be Coding。当敲的代码多了，你的能力才能慢慢提升，切忌眼高手低。 本文作者：Tikitoo本文出处：http://tikitoo.me/2015/08/23/android-developer-tutorial/转载请在开头注明作者详细信息和本文出处。 欢迎关注我的微信公众号，分享Android 开发和互联网内容。微信号：AndroidMate公众号：安卓同学","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://tikitoo.github.io/tags/Android/"},{"name":"Android 开发","slug":"Android-开发","permalink":"http://tikitoo.github.io/tags/Android-开发/"},{"name":"Android 入门","slug":"Android-入门","permalink":"http://tikitoo.github.io/tags/Android-入门/"},{"name":"自学Android","slug":"自学Android","permalink":"http://tikitoo.github.io/tags/自学Android/"},{"name":"Android 教程","slug":"Android-教程","permalink":"http://tikitoo.github.io/tags/Android-教程/"}]},{"title":"Tikitoo：来使用利器来提高效率吧","slug":"my-liqi","date":"2015-08-03T09:06:11.000Z","updated":"2015-08-03T09:35:06.000Z","comments":true,"path":"2015/08/03/my-liqi/","link":"","permalink":"http://tikitoo.github.io/2015/08/03/my-liqi/","excerpt":"","text":"介绍一下你自己和所做的工作。我是梁义发，网络ID 为Tikitoo。我2014 年毕业，后来自学了Android 开发，现在算是入门Android 开发吧。我也是一名互联网爱好者，也爱写文章。 硬件： 一台在大学买的笔记本，安装了Ubuntu，类Unix 还是适合开发的。 Meizu Note 2，觉得魅族的设计，交互体验都不错的。 入门 Kindle，现在也慢慢开始养成读书的习惯了。 其实还是穷呀，以后会入手Macbook，机械键盘，人体工学椅子。我觉得这些在长期看来都会提升幸福感的。 明知道自己在硬件是没有优势，所以就在软件上下工夫了。 软件： 开发：使用Android Studio，文本编辑器使用Sublime，现在切换到了Atom。使用WIFI ADB 连接Wifi 来测试应用，很实用。当然还有一些小工具就不说了。 效率工具：有Chrome，Evernote，Pocket，Pushbullet，IFTTT，Keep，SimpleNote，这些工具，会让工作学习更高效。 生活中：也会有像快图，Timi 记账，闹钟One，Google 相册，Mailbox，我是个软件控啦，不过这些软件真的让你省心不少。 生活知识类：比如丁香医生，知性，我觉得生活的常识应该去了解的。 你最理想的工作环境是什么？弹性的工作时间，不太拥挤而且舒适的桌椅，墙上不应该是光秃禿的，包含一些公司的文化是极好的。 你平时获得工作灵感的方式有哪些？其实作为一个开发人员，最重要的是对自身专业技能的提升，当然也应该对互联网行业的了解，自己也应该有对它的看法。 提升专业技能，主要就是看官方文档，学会使用Google，Stackoverflow，也会使用Feedly 订阅博客，也会看像Android Weekly，开发者头条等等。 微博，知乎，会读一些像36Kr，iFanr 的科技博客，来获取互联网信息。 推荐一件生活中的利器给大家Keep：Keep 一个健身App，它会提供一些不同难度的健身教程，就算是以前没有锻炼过的人，也没有太多违和感，我也希望作为技术人员，能坚持锻炼身体。 本文参与了「利器社群计划」，发现更多创造者和他们的工具：http://liqi.io/community/","categories":[],"tags":[{"name":"Tools","slug":"Tools","permalink":"http://tikitoo.github.io/tags/Tools/"},{"name":"利器","slug":"利器","permalink":"http://tikitoo.github.io/tags/利器/"},{"name":"效率","slug":"效率","permalink":"http://tikitoo.github.io/tags/效率/"}]},{"title":"Atom 在Ubuntu 中文显示乱码（方块）解决方法","slug":"ubuntu-atom-zh-display-squre","date":"2015-07-23T03:56:23.000Z","updated":"2015-07-23T03:59:44.000Z","comments":true,"path":"2015/07/23/ubuntu-atom-zh-display-squre/","link":"","permalink":"http://tikitoo.github.io/2015/07/23/ubuntu-atom-zh-display-squre/","excerpt":"","text":"前几天在Ubuntu上安装了Atom，谁知道在所有地方的中文都显示方块。这让人很郁闷，虽然写程序中文很少,但是总归有写中文的地方吧。之前找了很长时间就都没有找解决办法。所以今天闲了起来，就又来找办法，终于找到了解决办法，所以就来总结一下。 因为是Atom 官方没有提供对中文的显示，所以就自己找解决办法吧，不过网上的大神，已经找到了解决方法。之前在网络上有人说在设置中字体设置为文泉驿正黑 字体，就可以显示了，但是我设置了，但还是显示方块，今天又在网络上看到的，因为Ubuntu 系统默认是没有安装文泉驿正黑 字体的，需要我们手工安装来安装。 我们可以使用下面的方式来安装：1sudo apt-get install ttf-wqy-* 安装了之后，使用快捷键 Ctrl + , 打开设置。在Edit Settings 中的Font Family 中输入&#39;DejaVu Sans Mono&#39;, &#39;文泉驿正黑&#39; 即可。然后在编辑框中中文就可以正常显示了。 今天又测试了Markdown 预览界面，中文还是显示方块，又去找方法了。 在设置界面，打开左边Open Settings Folder，然后打开style.less 文件，添加以下内容即可。 style.less12345678@font-family: 'DejaVu Sans Mono', '文泉驿正黑';.markdown-preview &#123; font-family: @font-family; atom-text-editor::shadow *&#123; font-family: @font-family; &#125;&#125; 除了编辑框，Markdown 预览能正常显示中文外，其他地方可能也会显示不正常，这个时候，我们去网上搜索，基本上就是在配置中添加一些属性即可。 参考 中文字体问题&amp;讨论 Linux 下中文显示成方块的解决方案","categories":[],"tags":[{"name":"Atom","slug":"Atom","permalink":"http://tikitoo.github.io/tags/Atom/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://tikitoo.github.io/tags/Ubuntu/"}]},{"title":"Android 开发工具之ALFI（Android Library Finder）","slug":"android-development-tools-of-the-alfi-android-libary-finder","date":"2015-07-06T16:12:37.000Z","updated":"2015-07-06T16:24:28.000Z","comments":true,"path":"2015/07/07/android-development-tools-of-the-alfi-android-libary-finder/","link":"","permalink":"http://tikitoo.github.io/2015/07/07/android-development-tools-of-the-alfi-android-libary-finder/","excerpt":"","text":"Fastest way to get your dependencies（最快的方式获取依赖） 作为一个Android 开发者，你可能使用Android Studio Gradle 构建你的项目，对于Android 应用是新的构建系统（虽然有点慢，不过我已经找到解决方案），但是一个很酷的特点是依赖管理可以从远程仓库自动下载，使它们能在你的应用中使用。基本上，你只需在build.gradle 文件中添加一行就可以将类库添加到你的项目中，很容易，对吧？ 在Android Studio 来添加依赖类库 在Module 点击右键。 选择打开Module 设置（Open Module Settings）。 切换到Dependencies（依赖） 标签。 点击右边的“+” 按钮。 选择Libary Dependencies（类库依赖）。 输入要要搜索的类库。 在搜索结果中，选择要依赖的类库。 然后就在Module 文件夹下的build.gradle 文件就有多出一行刚刚添加的依赖库。 使用GradlePlease 在线搜索类库 http://gradleplease.appspot.com/ 如果你想在网页中体验的话，可以打开上面的网站，输入你要寻找的类库，它仅仅能显示一个结果，但是，你要现实两个，三个呢？ 使用ALFI（Android Library Finder）来试试ALFI： 安装1gem install alfi 搜索：1alfi picasso 打开终端，或者打开Android Studio 的终端（前提是已经配置过）。 输入： alfi 类库名字。 选择合适的依赖库。 粘贴到你的build.gralde。 仅仅只需要几个步骤，没有UI，一次就出来了很多结果。 又比如我们想知道Android 支持类库都有哪些？我们可以输入alfi com.android.support 来获取。 参考 本文整理来自：Android Library Finder - Fastest way to get your dependencies Gradle Please alfi - Android Library Finder | Github 本文作者：Tikitoo本文出处：http://tikitoo.me/2015/07/07/android-development-tools-of-the-alfi-android-libary-finder/转载请在开头注明作者详细信息和本文出处。 欢迎关注我的微信公众号，分享Android 开发和互联网内容。微信号：AndroidMate","categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://tikitoo.github.io/tags/android/"},{"name":"tools","slug":"tools","permalink":"http://tikitoo.github.io/tags/tools/"},{"name":"alfi","slug":"alfi","permalink":"http://tikitoo.github.io/tags/alfi/"}]},{"title":"Android Studio 入门指南（Slides）","slug":"html-embed-slides-com-test","date":"2015-07-02T10:14:58.000Z","updated":"2015-07-02T10:22:02.000Z","comments":true,"path":"2015/07/02/html-embed-slides-com-test/","link":"","permalink":"http://tikitoo.github.io/2015/07/02/html-embed-slides-com-test/","excerpt":"","text":"This is Html embed slides.com.","categories":[],"tags":[{"name":"html","slug":"html","permalink":"http://tikitoo.github.io/tags/html/"},{"name":"slides","slug":"slides","permalink":"http://tikitoo.github.io/tags/slides/"}]},{"title":"使用Github + Hexo 来搭建自己的博客","slug":"User-github-hexo-build-blog","date":"2015-07-01T04:47:18.000Z","updated":"2015-07-01T13:28:50.000Z","comments":true,"path":"2015/07/01/User-github-hexo-build-blog/","link":"","permalink":"http://tikitoo.github.io/2015/07/01/User-github-hexo-build-blog/","excerpt":"","text":"发现Hexo 一个主题不错，就尝试着Hexo 来搭建博客，在搭建的过程中也有不少坑，不过看了很多大牛详细的教程，终于把Hexo 博客搭建好了，所以就来总结总结。 Hexo 是一个基于Node.js 的一个博客框架。它支持Markdown 和大多数Octopress 插件。 安装前提是你要安装npm，然后使用npm 来安装1npm install hexo-cli -g 初始化12hexo initnpm install hexo --save 创建一个文章1hexo new \"hello world\" 生成静态博客1hexo generate 开启服务12npm install hexo-server --savehexo server 然后在浏览器中打开：http://localhost:4000/. 部署到远程服务器（Github）需要在配置文件（_config.yml）中添加一下配置远程仓库信息。12345deploy: type: git repo: &lt;repository url&gt; branch: [branch] message: [message] 然后就可以部署了。12npm install hexo-deployer-git --savehexo deploy 使用自己的域名添加CNAME 绑定域名的话，直接将CNAME 文件放在source 文件夹下即可。 添加README 文件和上面创建CNAME 文件一样，但是有一点要注意的是，README 文件后面不能跟后缀.md，因为跟了后缀.md 会被编译为html 文件，提交Github 就不起作用了。 添加Github Gist 代码段1&#123;% gist gist-id [file-name] %&#125;","categories":[],"tags":[{"name":"github","slug":"github","permalink":"http://tikitoo.github.io/tags/github/"},{"name":"hexo","slug":"hexo","permalink":"http://tikitoo.github.io/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"http://tikitoo.github.io/tags/blog/"}]},{"title":"是时候把Android 项目切换到Android Studio","slug":"it-is-time-to-switch-to-android-studio-android-project","date":"2015-06-14T07:44:38.000Z","updated":"2015-07-01T08:34:12.000Z","comments":true,"path":"2015/06/14/it-is-time-to-switch-to-android-studio-android-project/","link":"","permalink":"http://tikitoo.github.io/2015/06/14/it-is-time-to-switch-to-android-studio-android-project/","excerpt":"","text":"前几天时间刚结束的Google I/O 大会，是开发者的盛宴，众多新技术让我们目不暇接；当然作为一个Android 开发者，也有很多不可错过的东西，其中Android Studio 发布1.3 版本对于Android 开发者是个福音。 我的经历 当我还是Java 程序员的时候，我就在使用IntelliJ IDEA（没错Android Studio 就是基于它的），我能感受到一个好的工具，能大大提高我们的生产效率。所以当我转做Android 开发的时候，自然而然地使用Android Studio 开发，当然遇到好多问题，不过最终我都克服了，现在使用Android Studio 虽然算不上得心应手，但对于平常的开发还是绰绰有余，也能解决掉平常遇到的小问题。 Android Studio在国内为什么这么不流行？ 当然我也知道，Android Studio 在国内为什么这么不流行？我总结几点原因，之前在微博上和大牛们有讨论过。 国内的网络环境。对于下载，安装，更新都需要科学上网，初学者遇到这些问题基本上都会退缩；就算当初能科学上网，我也是遇到一大堆问题。 学习成本高。基本上国内的开发者的博客，入门教程大都是基于Eclipse，Android Studio 的教程少之又少，所以资源少，所以让初学者望而却步。 从业者和教育者的固步自封。基本上，Android 开发的不管大小公司，很少有公司使用Android Studio 来开发，再加上大家已经习惯使用Eclipse 开发，不愿意脱离熟悉的环境。市面上的Android 开发书籍，基本上都是以Eclipse 作为开发环境来讲解样例的，所以综上来说，没有人带头使用，造就了Android Studio 没有流行的原因。也只是稍微有点觉悟的公司都使用Android Studio 开发。 Android Studio 没有稳定的版本，并且不支持C/C++ 开发。直到2014 年 12 月才终于发布了正式版（1.0）。在这之前，时常会出现一些Bug。不过随着Android Studio 正式版的发布，到Google I/O 2015 的1.3 的发布，支持C/C++ 等众多特性，我们看到Android Studio 变得更加健壮，也让Android 开发者有信心切换到Android Studio。 对于以上的几个问题，我都已经找到了解决办法。 作为一个程序员，第一步就要学会科学上网，至于方法，自行搜索，如果找不到，劝你还是不要做程序员了。 至于说Android Studio 的教程，我会在文章结尾推荐大家一些教程，对于入门，熟悉使用也是足够了。 对于从业者和教育者，我建议大家去关注微博上的大牛，关注Github 的Android 开发者，他们都在使用Android Studio，有什么问题，可以向他们请教。我也希望，作为一个Android 开发者，也向周围的人推荐使用Android Studio。 Android Studio VS Eclipse 至于说Android Studio 和Eclipse 孰优孰劣，网上大牛们已经很多讨论了，更多请看，我就不多谈论了。 我们为何放弃Eclipse，投奔IntelliJ IDEA Android Studio VS Eclipse Android Studio 比 Eclipse 好用在哪里？ 也有人担心Android Studio 编译速度慢，不过以后就不用担心了，Android Studio 1.3 重写了编译系统，采用和Eclispe 一样的编译原理，所以我们就不用担心Android Studio 的速度了，我也亲自测试了，真的快了好多。 Google 官方也停止了ADT 的更新。那么使用Eclipse 就意味着好多新特性不能使用。而Android Studio 几乎每周都有更新，而且众多服务的集成，让开发者开发更加便捷，专注。 如果你上Github 的话，目前现在流行的开源Android 项目已经没有采用Eclipse，基本上全部采用Android Studio，而且Android Studio 集成Git 插件，从Github Clone 项目特别方便，而且可以直接运行。 介绍Android Studio 1.3 的新特性如果说Android Studio 1.0 可以勉强够用，那么Android Studio 1.3 相比1.0 就是质的改变，支持C/C++，支持SVG 图片自动生成不同分辨率的图片，增加主题编辑器，以后编辑主题，你也可以实时预览了等等很多。更多请看。 Google I/O 2015 为 Android 开发者带来了哪些福利？ - 代码家 怎么将Eclipse 项目切换到Android Studio？ 不用急，Google 官方已经给出了两种解决方式解决方案。 第一种直接选择目录，next 一直到最后，我们的Eclipse 的项目就到了Android Studio 上了，需要注意的是，这样导入的项目还是会保留Eclipse 的构建方式，比如我们在Eclipse 上使用Ant 构建，迁移后还是会是会用Ant 构建。 第二种首先，我们在Eclipse 将项目导出为Gradle 项目。然后在Android Studio 直接打开build.grade 即可。这样，项目就变成了Gradle 构建了。 当然了，如果项目比较庞大，特别是商业项目，直接切换，难免会有很多问题，不过这是难免的，切换过来，也会一段时间内不太适应，不过当你适应了Android Studio 的便捷的开发，就会对它不离不弃了。 上面的两种方式是官方提供的方式，如果英文过关的话，可以看英文原文。 Migrating From Eclipse Projects（从Eclipse 迁移项目到Android Studio） 参考以及文章推荐 最后，关于Android Studio 我感觉不错的文章，推荐给你。 Android Studio 入门指南这是我写的文章，主要是给初学者搭建Android Studio 开发环境来看的。 Android Studio系列教程这篇是大牛StormZhang 写的系列Android Studio 教程，深入浅出，通俗易懂。 Migrating From Eclipse Projects（从Eclipse 迁移项目到Android Studio）这篇是官方给出的从Eclipse 迁移项目到Android Studio 的两种解决方式。 Google I/O Summary: What’s new in Android Development Tools Google I/O 2015 为 Android 开发者带来了哪些福利？ - 代码家上面两篇，都是对Google IO 2015 的总结，一个中文，一个英文，就看你喜欢看哪个了。中文是大牛代码家总结的。 Android Studio 的安装和配置篇（Windows篇） Android Studio 使用指南 | Android Studio 中文教程 从Eclipse中导入项目到AndroidStudio中 本文作者：Tikitoo本文出处：http://www.jianshu.com/p/fe6af27c12ed转载请在开头注明作者详细信息和本文出处。 欢迎关注我的微信公众号，分享Android 开发和互联网内容。微信号：AndroidMate","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://tikitoo.github.io/tags/Android/"},{"name":"Android Studio","slug":"Android-Studio","permalink":"http://tikitoo.github.io/tags/Android-Studio/"},{"name":"Tools","slug":"Tools","permalink":"http://tikitoo.github.io/tags/Tools/"}]},{"title":"Android Studio 入门指南","slug":"android-studio-getting-guide","date":"2015-04-19T22:23:42.000Z","updated":"2015-07-01T09:02:50.000Z","comments":true,"path":"2015/04/20/android-studio-getting-guide/","link":"","permalink":"http://tikitoo.github.io/2015/04/20/android-studio-getting-guide/","excerpt":"","text":"作为一个Android 开发者，你应该很了解Android Studio，如果你现在还不了解，没关系，那么从现在开始，我们一起来了解了解Andoid Studio。 Android Studio 是Google 官方在2013 Google I/O 大会（2013 年5月）上发布的全新Andrid 开发IDE（基于Intellij IDEA），在2014 年12 月发布第一个稳定版（1.0），目前最新版本为1.2 Beta 3；依托与Intellij IDEA，它更智能，提示功能更强，默认使用Gradle 构建，布局文件实时预览等等。 更多Android Studio 的优点请移步：Android Studio VS Eclipse ADT Android SDK 安装 官方下载：SDK Tools - Android Developer国内镜像：SDK Tools - AndroidDevTools有了SDK Tools 就可以配置，就可以安装Andrid SDK 了，打开Android SDK Manager 打开SDK Manager，如果有代理或者VPN 可以直接下载，一般要勾选Tools，Extras；SDK 版本不用全部更新。由于国内连接速度很慢，可以参考这篇文章来使用国内的镜像来下载。 如何让你的Android SDK下载或者升级快如闪电 | ChenQichao’s Blog Android Studio 下载和安装 下载下载之前，你要确保已经安装JDK 和Android SDK。由于国内不能直接下载，所以我在这里提供两种下载方式，一种是官网，另一种是国内的镜像网站。 官网下载：Android Studio Download 国内镜像：AndroidDevTools - Github。 安装下载完之后，如果是安装包，可以直接安装即可；如果是解压包，可以解压后，直接运行。 Windows 运行 安装目录/studio.exe 文件。 Mac / Linux 运行 安装目录/bin/studio.sh。 打开之后，会进入设置页面，如果没有安装SDK，选择Standard（标准）。如果已经安装过了SDK 就选择Custom（自定义），然后选择SDK 安装目录即可。然后一直Next 就好了。 Gradle 的安装和配置 由于Android Studio 默认使用Gradle 构建，而gradle 在国内访问速度离奇的慢，所以我们就自己安装了。 官方下载Gradle：Gradle - Download 国内下载Gradle： Gradle - AndroidDevTools 详细安装：Gradle Install Guide（安装指南） · Issue #11 · Tikitoo/blog 使用Android Studio构建第一个Android 程序 据说第一次创建项目的时候，会卡在那里，有大牛找到的解决办法，就是配置离线Gradle，因为上面我们已经下载过Gradle 了，可以直接拿来用。可以把gradle-2.1-all.zip（不解压）Windows 放在C:\\Users\\xxx\\.gradle\\wrapper\\dists\\...... 目录中（如图所示）。Mac/Linux 放在 ~/.gradle\\wrapper\\dists\\......。 然后再次创建Project 就不会卡了。 一个Android 项目的目录文件的作用 一个Project 创建后，大概的文件目录就是这样的。因为在Android Studio每个Project，相当于Eclipse 的WorkSpace；每个Module（上图的app 目录）相当于Eclipse 的Project。 settings.gradle： 每个Moudle 要在这里注册 build.gradle：每个Project 的配置 app：每个Module app/build.gradle：每个Module 配置文件，比如依赖的类库，SDK 版本 app/src/：源码和资源文件都在这里；我们写的文件都在这里面。 app/libs/：添加类库。 工程和文件结构 文件编辑区域 编辑区域左边（显示行号的） 输入提示区域 文档切换区域 Alt + Left 或者Alt + Right，不同的Tab 切换 Ctrl + Tab：切换不同的区域 其他功能区域 新建文件或者插入方法ALT + INSERT（COMMAND + N Mac） 在编辑区域是插入方法（构造方法，Get Set 方法等等）； 在工程结构新建文件 罗列一些常用的快捷键 全局快捷键（比较重要的） ALT + ENTER 工程快速修复 CTRL + SHIFT + A 快速查找 CTRL + ALT + L (Win) 格式化代码（我的锁屏的快捷键占了） CTRL + Q (Win) 查看文档 SHIFT + ESC 当切换非编辑区域时，关闭该区域，返回编辑区域 编辑区快捷键 CTRL + B / F4 查看源码 CTRL + Q 查看文档 SHIFT + ESC 当切换非编辑区域时，关闭该区域，返回编辑区域 ATRL + / 上下文联想 ALT + LEFT / RIGHT 不同文档左右切换 ALT + TOP / BOTTOM 跳转到上一个 / 下一方法 注释 CTRL + / 注视当前行 CTRL + SHIFT + / 文档注视 复制 / 粘贴 CTRL + C 复制该行 CTRL + V 粘贴 CTRL + X 剪切 CTRL + Y 删除该行 查找 Ctrl+Shift+A 查找所有行为 Ctrl + F 查找当前编辑的文档 Ctrl + R 查找并替代 Ctrl + N 查找类（class） Ctrl + SHIFT + N 查找文件 Git 使用 由于Android Studio 已经自带了Git 插件，所以我们就不需要去下载了，只需要在本机下载Git 安装即可。然后将可执行文件配置在Android Studio 即可。 参考 Android Studio系列教程——下载与安装 Android Studio 比 Eclipse 好用在哪里？ - 知乎 Android Studio 的安装和配置篇（Windows篇） - 简书 如何让你的Android SDK下载或者升级快如闪电 | ChenQichao’s Blog Gradle Install Guide（安装指南） · Issue #11 · Tikitoo/blog inferjay/AndroidDevTools 本文作者：Tikitoo本文出处：http://www.jianshu.com/p/36cfa1614d23转载请在开头注明作者详细信息和本文出处。 欢迎关注我的微信公众号，分享Android 开发和互联网内容。微信号：AndroidMate","categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://tikitoo.github.io/tags/android/"},{"name":"guide","slug":"guide","permalink":"http://tikitoo.github.io/tags/guide/"}]},{"title":"Android 开发必备小知识点","slug":"android-the-development-of-essential-little-knowledge","date":"2015-04-18T01:15:05.000Z","updated":"2015-07-01T09:02:34.000Z","comments":true,"path":"2015/04/18/android-the-development-of-essential-little-knowledge/","link":"","permalink":"http://tikitoo.github.io/2015/04/18/android-the-development-of-essential-little-knowledge/","excerpt":"","text":"RGB 颜色透明度Android 中使用RGB 来表示颜色，如果想要表示透明度，在六位十六进制的前面添加两位十六进制表示透明度。 Material Color对开发人员，选择一个颜色真的很不容易，那就让设计师帮你挑选吧。 Android 系统默认字体Android 系统默认字体只有很少，从Android 16（Android 4.1）默认提供了一些字体，可以引用。 Android px、dp、sp之间相互转换在Android 中设置在Java 文件中设置属性，有的方法只提供一种形式的尺寸（比如px），所以这个时候就需要我们去相互转化。 AndroidPixelsAndroidPixels 是一个px，sp 相互转化的工具。 Android Support兼容包详解Android 中有不同版本的系统，对于老的版本想要支持新的系统的功能，Android 使用Support 包来解决的。 Android 多屏适配Android 手机，平板有不同的尺寸，不同的尺寸又相差很多，所以要对不同的尺寸的手机进行适配。 更多的以后补充。。。。。。 本文作者：Tikitoo本文出处：http://www.jianshu.com/p/748c10304d08转载请在开头注明作者详细信息和本文出处。 欢迎关注我的微信公众号，分享Android 开发和互联网内容。微信号：AndroidMate","categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://tikitoo.github.io/tags/android/"},{"name":"Tools","slug":"Tools","permalink":"http://tikitoo.github.io/tags/Tools/"}]},{"title":"作为移动开发者，你应该了解Baas（后端即服务）","slug":"as-a-moblile-developer-you-should-know-baas-backend-as-a-service","date":"2015-04-12T03:17:00.000Z","updated":"2015-07-01T09:49:10.000Z","comments":true,"path":"2015/04/12/as-a-moblile-developer-you-should-know-baas-backend-as-a-service/","link":"","permalink":"http://tikitoo.github.io/2015/04/12/as-a-moblile-developer-you-should-know-baas-backend-as-a-service/","excerpt":"","text":"作为开发者，了解新技术，新的工具是必不可少的，有时候发现一个好的开发工具，使用起来非常顺手，效率也提高了， 然而如果不了解新的技术，不了解这个行业的发展趋势，那样的后果是不堪回首的，反正，与时俱变是没有错啦，所以今天就来说说每个移动开发者都应该知道的Baas。 那么什么是Baas？ 前一段时间在知乎上看到AVOSCloud（现在改名叫LeanCloud 了），不知道这是什么东西，偶尔在微博看到有人说在用， 昨天有无意间看到了，就索性把这个弄清楚了，这个东西叫Baas（又称mBaas），全称叫Backend as a Service（后端作为一种服务）， 怎么说呢，为移动应用开发者提供后端服务； 作为一个移动应用开发者（Android &amp; iPhone），除了开发应用程序，还要做后台的服务器端，当然，大多移动应用开发者并非都懂后端开发， 这让一个应用应用开发者开发一款应用不容易，然而有了Baas，开发者就可以不用管后端开发了，Baas 提供商，提供了我们最常用的功能，比如数据存储，应用分析，IM 等功能，让开发者把主要精力放在应用本身，大大提高了效率； 当然也不一定是移动应用开发者，当然也可以Web 开发，当初Baas 主要是为了解决移动应用开发者的后端服务问题，Baas 也提供其他的服务； 那么Baas 都提供哪些服务呢？ 以Parse 为例，主要有以下功能： 消息推送 数据分析 保存数据到云平台 简单的社交服务 本地数据储存 在云服务上运行客户端代码 后台工作 实时查看应用程序的数据，数据推送，日志等 其实可以吐槽一下，其实实现的功能比较基础的，一般有后端开发经验的开发者，也不是什么难事，但是自己要搭建服务器，还要一系列的服务要实现， 也是费时费工，有这样的服务，提供的简单的API，使用起来上手非常容易，也提供了一些 Demo，只要自己在服务后台创建应用，申请API_ID，API_KEY就可以使用。 Baas 服务商都有哪些呢？ 2013年4月，Facebook收购Parse；2014年6月，苹果在一年一度的WWDC上发布了CloudKit；等到了2014年10月份，Google也出手收购了Firebase。——来自 PingWest 从巨头的态度，就已经看出他们对Baas 的态度，能让移动开发更家简单，才会吸引更多的开发者；当然Baas 的厂商也是层出不穷，而且提供的功能也有各部相同，所以作为一个移动开发者，选择一个适合自己的服务尤为重要，所以接下来就给大家介绍几个知名的Baas 服务，以及他们的提供的功能。 Appcelerator Cloud它要依赖Appcelerator Titanium SDK 一起使用，官方宣称目前共有265728526 设备运行着Appcelerator Cloud 服务提供的应用程序，客户不乏有Ebay，vmWare； Parse 也算是特别出名的，刚刚介绍Baas 的时候，就拿它当例子，他的出名更归功于跟了Facebook； UserGrid Apache 提供了一个Baas 框架，支持多平台， LeanCloud（AVOSCloud） LeanCloud 和Facebook Parse 提供的重合度很高 社交IM 服务 消息推送服务 数据分析 支持任何类型的结构化 / 半结构化数据，还有地理位置存储 并且提供CDN 存储 云代码 集成GitHub、Bitbucket 或 CSDNCode 对每一个应用，每个月免费提供 500 万次的请求配额 除了上面这些，国外的比如Kinvey，StackMob，Applicasa，名气都是很大，他们提供的功能大都很全，很强大，当然也有提供专有的服务，比如消息推送，IM，分享等等，就不意义介绍了。 下面就说说国内的，国内的Baas 服务随着国内移动开发的的热潮，也如雨后春笋般发展，比如： 友盟，提供了应用分析，消息推送社会化分析，如果你仔细注意，友盟已经被阿里收购，也看出国内的巨头也对Baas 足够的重视； Mob - ShareSDK，又比如专门做社会化分享的，几乎集成了国内外的主流社交网站； 极光推送，专门做推送服务； 除了上面的这些，还有其他的比如应用测试，应用分析等等很多，就不一一列举了。 到了最后，选择一款适合的自己的Baas 服务也是不易的，比如要考虑到以后发展的扩展，各种Baas 的对比，Baas 服务的安全问题等等都是我们该考虑的问题。 参考 你可能没听说过的BaaS，却是Facebook、苹果和Google同时盯上的领域 BaaS服务的定义、发展以及未来 了解Baas（Backend as a Service） - Tikitoo Blog 本文作者：Tikitoo本文出处：http://www.jianshu.com/p/48384a8831de转载请在开头注明作者详细信息和本文出处。 欢迎关注我的微信公众号，分享Android 开发和互联网内容。微信号：AndroidMate","categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://tikitoo.github.io/tags/android/"},{"name":"mobile","slug":"mobile","permalink":"http://tikitoo.github.io/tags/mobile/"},{"name":"baas","slug":"baas","permalink":"http://tikitoo.github.io/tags/baas/"}]},{"title":"我是如何自学Android，资料分享（2015）","slug":"how-do-i-self-study-android-2015","date":"2015-02-11T01:37:16.000Z","updated":"2015-07-01T09:00:58.000Z","comments":true,"path":"2015/02/11/how-do-i-self-study-android-2015/","link":"","permalink":"http://tikitoo.github.io/2015/02/11/how-do-i-self-study-android-2015/","excerpt":"","text":"自己学了两三个月的Android，最近花了一周左右的时间写了个App——Diigoer（已开源），又花了一两周时间找工作，收到了两个Offer，也算是对自己学习的一种认可吧；我刚开始学习总结的——《我是如何自学Android，资料分享》，如果是初学Android 的话，不应该错过的，而今天这篇分享好这篇文章，相对于第一次写的会有所提升，所以建议先把上一篇看了，再来看这一篇；那下面就切入正题吧，之前重复的就不再介绍了，相对于第一季，自己对Android 的认识更加深了（算是入门了吧），干货更多了，更加通俗易懂了，英文资料会多一点；而自己学习过程中发现的一些好资源，分享给你们，希望对你们的有一些帮助； Java 学习 我要再次强调，一定要有Java 基础（虽然现在使用其他语言也可以开发Android，但毕竟是很小众），也不要认为学习Java 两三周就可以不用管了，这会在以后的深入学习中暴露出问题，所以Java 基础一定要牢固，当然我也不是说，Java 学的特别好，才能去学习Android，毕竟学习是循序渐进的，所以在以后的学习中要注意，对于Java 系统的学习，我有一下几个推荐； Introduction to Programming in Java: An Interdisciplinary Approach普林斯顿的公开课，也有书籍，我觉得可以直接跟着公开课学习就OK 啦； Java Tutorial - TutorialSpointTutorialSpoint 是一个专门技术教程网站，其他教程也可以去看学习；当然你想离线观看，网站还提供了PDF 版 Java Tutorial PDF Javanotes 7.0 – Title Page这个是霍巴特威廉史密斯学院的一本书，跟着JDK 版本，已经发行了好多版本； 由于篇幅有限，所以在这里就不累赘了，以后会专门写一篇文章来说Java； Android 系列教程 这一段时间，发现了好多学习资源，自己收藏了，不敢独享，所以拿出来和大家分享，如果您发现不错的学习资源，欢迎留言；而学习的过程中，也忽略了一些问题，比如自己学习的不系统，如果您也是自学的话，一定要注意这个问题，我觉得，除了看官方文档和大牛的博客之外，最重要就找一本好书，把自己的知识系统化； 入门指南 Getting Started | Android Developers How to get started programming Android apps | HalfApp A step by step guide about how to get started and involved in Android Development - Reddit Beginning Android Resources · codepath/android_guides Wiki 我是如何自学Android，资料分享 我推荐的 Android 基础学习路线 Android入门杂谈 书籍推荐 首先自己没有很系统地去看一本书，所以我也是搜索，或者实在知乎上别人推荐的，所以，要根据自己的情况，适合自己的书来看； The Busy Coder’s Guide to Android Development这是大牛CommonsGuy 开源的一本书，它的更新非常及时，基本上就是跟着SDK 更新的，下载PDF 可以在这里（Four-to-Free Guarantee）下载，书籍中源码可以在Github（commonsguy/cw-omnibus） 中查看； Best Android Books and Resources 2014这篇文章主要介绍了Android 书籍和开发资源； 公开课 How to Develop Android Apps Online Course - Udacity Programming Mobile Applications for Android (Coursera) Android Development For Absolute Beginners - YouTube 系列教程 Home · codepath/android_guides Wiki - codepathAndroid 指南，它不仅介绍怎么创建一个最简单的App Demo，循序渐进教你使用各种流行的框架，对于即将工作的同学来说是很用用的；Demo 很有实战意义； Android tutorial - TutorialSpoint是不是特别熟悉呀，对上面提到过，教程特别通俗易懂，代码实例也不错； Android Development - Vogella教程挺通俗易懂 AndroidHive | Tutorials, Games, Apps, Tips |博主是印度人，博客主要是以教程为主，质量较高，而且会分享比较新的东西； Android Tutorial | Interactive and Step by step tutorial to learn Android Android SDK - Tuts+ Code Category Android Programming Archives - Learn2Crack Android Learning Path | SlideRule 大牛博客推荐 android-cn/android-dev-cn主要介绍国内Android 开发大牛； android-cn/android-dev-com主要介绍国外Android 开发大牛； What are must-read Android developer blogs? - QuoraQuora 上的回答 有哪些 Android 大牛的 blog 值得推荐？ - 知乎知乎上的回答 开源App F-Droid | Free and Open Source Android App RepositoryF-Droid 是一个Android 开源App 仓库 Android优秀开源项目 - 小猪爬爬 The Android Arsenal - A categorized directory of free libraries and tools for Android在这里，找到最新最流行的Android 开源类库 Trinea/android-open-project - Trinea大牛Trinea 写的Android 开源项目汇总 开发工具 Great Code Examples &amp; Snippets | Codota一个Android 代码搜索引擎；前两天发现了这个工具就爱不释手，写了篇文章——《Android 开发工具之Codota——搜索最好的Android 代码 - 简书》，让你参考入门。 Gradle知乎上我回答的《如何从eclipse转入android studio,感觉Gradle什么的很难理解的。有什么教程吗? - Tikitoo 的回答 - 知乎》，可以参考。 Android Studio从Google 的态度就可以看出，Android Studio 就是未来，而且在最近发布了正式版，教程在网上也不少。 Android User Interface | User Experience | Inspiration source for Android Designers and Developers Android App Patterns Iconfinder - 400,000+ free and premium icons一个Icon 搜索引擎 google/material-design-icons - githubGoogle 把官方的Material Design 1000+ 的Icon 开源了，不仅仅只有Android 版，而且还有Web 和iOS，真是业界良心呀。 inferjay/AndroidDevToolsinferjay 总结的开发工具，并且提供了国内的镜像。 Genymotion - A faster Android emulatorGenymotion 是Android 的虚拟机，比官方的快了不知多少啊，它是基于Virtual Box，并且提供了插件。 订阅 Android 周刊 Android开发技术周报 码农周刊 - Android 资源 Best resources for Android development Resources every Android developer must know中文版——《Android开发者必知的开发资源 - ImportNew》，译者是ImportNew - 黄小非 开发资源 | Android 沉思录 Android Developer Resources, Tutorials, and References — Being Apptentive Beginning Android Resources · codepath/android_guides Wiki Android开发者资源大汇总 - Android开发周刊 - 博客园 awesome-android - github Where To Start - Learning Android Development the Right Way - Kevin Darty - Google+ resources - androiddev reddit Android自学资料汇总 Android 学习之路 参考 http://www.quora.com/What-are-the-best-resources-to-learn-Android-development http://www.quora.com/What-are-the-best-websites-to-learn-Android-development-tools# http://www.sitepoint.com/12-android-tutorials-beginners/ http://nimooli.com/blog/best-android-books-2014/ 本文作者：Tikitoo本文出处：http://www.jianshu.com/p/874ff12a4c01转载请在开头注明作者详细信息和本文出处。 欢迎关注我的微信公众号，分享Android 开发和互联网内容。微信号：AndroidMate公众号：安卓同学","categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://tikitoo.github.io/tags/android/"},{"name":"tutorial","slug":"tutorial","permalink":"http://tikitoo.github.io/tags/tutorial/"}]},{"title":"Android 开发工具之Codota——搜索最好的Android 代码","slug":"codota-search-of-the-best-android-tools-android-code","date":"2015-02-03T16:18:09.000Z","updated":"2015-07-01T09:18:48.000Z","comments":true,"path":"2015/02/04/codota-search-of-the-best-android-tools-android-code/","link":"","permalink":"http://tikitoo.github.io/2015/02/04/codota-search-of-the-best-android-tools-android-code/","excerpt":"","text":"123Find Great Code ExamplesOur crawler extracts coding patterns from a vast number of code projects. Search here for the best code examples from over 7 million sources 上面是Codota 官方介绍的123最好的代码实例，我们的抓取工具从大量的代码项目中抓取了大量的代码模式，你可以从这里搜索超过七百万精品代码实例； Codota 的特性 的确，正如codota 官方所说，的确是精品，他的搜索源，不仅只有Github，而且还有知名博客和开发者网站，让你搜索一个东西，不用在找上半天； 除了搜索功能，首页的下方还罗列比较流行的类库，还提供保存代码的CodeBox，同时还提供了Chrome 插件和Android Studio 插件，最后通过Google，Github，Facebook 任意一个授权登录即可使用； 而且当你点击搜索的结果（Java class）的时候，右侧会显示UML 视图，而且左边的代码如果点击会有高亮现实，而且还会显示Doc，并提供了API Doc 的链接。 Chrome 插件 而且Codota 还提供了Chrome 插件，通过插件可以对Github，Stackoverflow 的代码，进行查看，分享，也可以保存在CodeBox 中。 Android Studio 插件 这么好的工具，怎么可能会没有Android Studio 插件呢？直接在plugin 中搜索codota，安装后重启Android Studio 即可；重启之后，Ctrl + K 或者⌘ + K（OS X）即可打开Codota 视图，需要注意的是，这个时候会请求一个token，会在浏览器中打开，直接复制，就可以使用了。 最后 那就一睹为快吧，Codota 的官网： Great Code Examples &amp; Snippets | Codota","categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://tikitoo.github.io/tags/android/"},{"name":"Tools","slug":"Tools","permalink":"http://tikitoo.github.io/tags/Tools/"}]},{"title":"Android 中判断网络状态是否连接","slug":"android-check-network-available","date":"2015-02-02T07:45:12.000Z","updated":"2016-01-02T13:36:14.000Z","comments":true,"path":"2015/02/02/android-check-network-available/","link":"","permalink":"http://tikitoo.github.io/2015/02/02/android-check-network-available/","excerpt":"","text":"在Activity 中判断网络状态在Android 中，我们经常会判断网络，Anddroid 官方提供了这样的解决方式，可以用来判断是否连接网络。 当然了，也别忘记要在清单文件注册获取网络状态的权限。 使用单例模式来判断网络 当然上面的代码也有弊端，获取getSystemService() 方法必须是有默认上下文的，才可以获取的，但是获取网络状态又是很频繁，我们将它抽离出来，放到工具类中。我们通过getInstance() 传入上下文。 最后我们在Activity 中就可这样使用了。 参考 Determining and Monitoring the Connectivity Status Detect whether there is an Internet connection available on Android [duplicate]","categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://tikitoo.github.io/tags/android/"},{"name":"network","slug":"network","permalink":"http://tikitoo.github.io/tags/network/"}]},{"title":"为ActionBar 添加返回按钮","slug":"android-add-to-actionbar-back-button","date":"2015-01-19T14:07:06.000Z","updated":"2016-01-02T13:45:52.000Z","comments":true,"path":"2015/01/19/android-add-to-actionbar-back-button/","link":"","permalink":"http://tikitoo.github.io/2015/01/19/android-add-to-actionbar-back-button/","excerpt":"","text":"前几天做App 的时候，做的比较仓促，就没有添加返回按钮，还有就是MainActivity 的Theme 怎么传递到其他Activity 中，今天无意中看到官方的Train，所以就记下来啦，顺便吧ActionBar，Menu 也复习复习； 添加Action Buttons首先我们要创建menu 文件，我们可以为顶部添加Menu，showAsAction 是显示的类型，ifRoom 会自动匹配是否有实体键，always 是一直隐藏，但是使用Support Libraryandroid:showAsAction=&quot;ifRoom&quot; 会提示错误，所以在menu 中添加xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; 属性，改为app:showAsAction=&quot;ifRoom&quot; 就没有错误； res/menu/main_activity_actions.xml1234567891011&lt;menu xmlns:android=\"http://schemas.android.com/apk/res/android\" &gt; &lt;!-- Search, should appear as action button --&gt; &lt;item android:id=\"@+id/action_search\" android:icon=\"@drawable/ic_action_search\" android:title=\"@string/action_search\" android:showAsAction=\"ifRoom\" /&gt; &lt;!-- Settings, should always be in the overflow --&gt; &lt;item android:id=\"@+id/action_settings\" android:title=\"@string/action_settings\" android:showAsAction=\"never\" /&gt;&lt;/menu&gt; 添加ActionBar123456@Override public boolean onCreateOptionsMenu(Menu menu) &#123; // Inflate the menu; this adds items to the action bar if it is present. getMenuInflater().inflate(R.menu.menu_main, menu); return true; &#125; 为Action Button 添加响应事件12345678910111213141516@Overridepublic boolean onOptionsItemSelected(MenuItem item) &#123; int id = item.getItemId(); //当点击不同的menu item 是执行不同的操作 switch (id) &#123; case R.id.action_search: openSearch(); break; case R.id.action_settings: openSettings(); break; default: break; &#125; return super.onOptionsItemSelected(item);&#125; 为ActionBar 顶部添加返回按钮首先要在AndroidManifest 文件中配置 123456789101112131415161718&lt;application ... &gt; ... &lt;!-- The main/home activity (it has no parent activity) --&gt; &lt;activity android:name=\"com.example.myfirstapp.MainActivity\" ...&gt; ... &lt;/activity&gt; &lt;!-- A child of the main activity --&gt; &lt;activity android:name=\"com.example.myfirstapp.DisplayMessageActivity\" android:label=\"@string/title_activity_display_message\" android:parentActivityName=\"com.example.myfirstapp.MainActivity\" &gt; &lt;!-- Parent activity meta-data to support 4.0 and lower --&gt; &lt;meta-data android:name=\"android.support.PARENT_ACTIVITY\" android:value=\"com.example.myfirstapp.MainActivity\" /&gt; &lt;/activity&gt;&lt;/application&gt; 然后在onCrate 中设置123456789@Overridepublic void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_displaymessage); // 3.0+ getSupportActionBar().setDisplayHomeAsUpEnabled(true); // If your minSdkVersion is 11 or higher, instead use: // getActionBar().setDisplayHomeAsUpEnabled(true);&#125; 最后的效果图 为下一个Activity 传递MainActivity Theme需要注意的是，setTheme 方法在setContentView 之前；其实就是利用Intent 将Theme 传递到下一个Activity； 1234567891011121314151617public class MainActivity extends ActionBarActivity &#123; public static int MAIN_THEME_STYLE_ID = R.style.Theme_AppCompat_Light; public static String MAIN_THEME_STYLE = \"Theme_AppCompat_Light\"; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setTheme(R.style.Theme_AppCompat_Light); setContentView(R.layout.activity_main); &#125; public void onToBackActivity(View view) &#123; Intent intent = new Intent(this, BackActivity.class); intent.putExtra(MAIN_THEME_STYLE, MAIN_THEME_STYLE_ID); startActivity(intent); &#125;&#125; 在下一个Activity 获取Theme12345678910111213141516171819public class BackActivity extends ActionBarActivity &#123; int style_id; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); getMainIntent(); setTheme(style_id); setContentView(R.layout.activity_back); getSupportActionBar().setDisplayShowCustomEnabled(true); &#125; void getMainIntent() &#123; Intent intent = getIntent(); style_id = intent.getIntExtra(MainActivity.MAIN_THEME_STYLE, 0); &#125;&#125; 原文地址 Android 学习为ActionBar 添加返回按钮 · Issue #29 · Tikitoo/blog 转载请注明出处","categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://tikitoo.github.io/tags/android/"}]},{"title":"Android 网络编程之Httpclient 和HttpUrlConnection","slug":"httpclient-and-httpurlconnection-network-programming-of-android","date":"2014-11-13T10:59:23.000Z","updated":"2015-07-03T11:04:34.000Z","comments":true,"path":"2014/11/13/httpclient-and-httpurlconnection-network-programming-of-android/","link":"","permalink":"http://tikitoo.github.io/2014/11/13/httpclient-and-httpurlconnection-network-programming-of-android/","excerpt":"","text":"我们知道在Android 中有两种方式来访问网络，一种是HttpClient，一种是HttpUrlConnection，所以今天就来写两个Demo，来练习这两种网络连接方式。 使用HttpClient 来连接网络HttpClient 是Apache 的一个Http 协议类库，Android 类库对其进行了封装，可以直接使用。 使用HttpUrlConnection 来连接网络Url（Uniform Resource Locator）：统一资源定位符，不仅仅只有网址。 一个URL 有多个部分组成：1http://username:password@host:8080/directory/file?query#ref Component Example value Protocol（协议） http Authority username:password@host:8080 User Info（用户信息） username:password Host（主机名） host Port（端口） 8080 File（文件） /directory/file?query Path（路径） /directory/file Query（语句） query Ref ref 支持的协议有：File，Ftp，Http，Https，Jar URL 的构造方法12URL(String spec) // 通过一个字符串传入URL 比如new URL(\"http://www.google.com.hk\"); 使用Url 对象获取UrlConnection（HttpURLConnection 的父类） 对象12URLConnection openConnection() // 获取URLConnectionURLConnection openConnection(Proxy proxy) // 通过指定的端口获取URLConnection 通过URL 获取输入流对象1final InputStream openStream(); // 等同于openConnection().getInputStream(types) 获取URL 的各种属性12getPath()，getPort()......等等其他方法也可以使用equal(Object o); 来判断两个URL 对象是否相同 获取HttpURLConnection 对象通过URL.openConnection() 方法获取URLConnection 对象，强制转换为HttpURLConnection 通过HttpURLConnection 对象获取输入输出流1234getOutputStream();getInputStream();// 关闭此连接disconnect(); 最后一个例子这个例子实现了通过HttpURLConnection 访问给定的网址访问网页并将返回的数据通过流对象打印在控制台中 错误总结：如果连接网络操写在主线程内会出现：android.os.NetworkOnMainThreadException 异常因此新建一个线程子类，在OnclickListener 中启动线程类。 第三方类库对于在Android 上Http 第三方类库也有很多，优化的时候可以参考： HttpClient：在早起版本，比较稳定，bug 少，但随着升级，bug 变多。 HttpURLConnection：轻量级，API 简单，优化，后期版本bug 少，就目前看来，比HttpClient 更合适。 Volley Volley: Easy, Fast Networking for Android platform/frameworks/volley - Git at Google Android Volley dynamic ListView: AsyncTask comparison | Java Code Geeks Android – Volley library example RetrofitOkHttpandroid-async-http 参考 Android Networking - Tutorial HttpURLConnection - Android SDK - Android Developers Android访问网络，使用HttpURLConnection还是HttpClient？ Android Async HTTP Clients: Volley vs Retrofit Android访问网络，使用HttpURLConnection还是HttpClient？ 【Android进阶学习】Http编程之HttpClient HttpClient基础","categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://tikitoo.github.io/tags/android/"},{"name":"network","slug":"network","permalink":"http://tikitoo.github.io/tags/network/"},{"name":"http","slug":"http","permalink":"http://tikitoo.github.io/tags/http/"}]},{"title":"Android 网络编程之HTTP 协议","slug":"http-protocol-network-programming-of-android","date":"2014-11-11T10:00:54.000Z","updated":"2015-07-03T11:05:00.000Z","comments":true,"path":"2014/11/11/http-protocol-network-programming-of-android/","link":"","permalink":"http://tikitoo.github.io/2014/11/11/http-protocol-network-programming-of-android/","excerpt":"","text":"请求响应机制 我们平常上网，输入网址，请求数据，服务器收到请求数据后，给我们响应，返回一个网页，我们看到网页；这个一个请求，一个响应，使用的就是Http 协议，请求响应机制。 我们可以使用Chrome 浏览器快捷键Ctrl + Shift + I 来打开来查看。 Request Headers（请求头）：1234Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webpAccept-Encoding:gzip,deflate,sdchAccept-Language:zh-CN,zh;q=0.8,zh-TW;q=0.6,en;q=0.4 // 支持的语言// ... other Response Header（响应头）：12345Connection:keep-aliveDate:Mon, 10 Nov 2014 08:43:53 GMTLast-Modified:Thu, 24 Jul 2014 16:28:21 GMTServer:nginx/1.0.10// ... other 获取详细的请求头（Request Headers）和响应头（Response Headers）以及自定义 请求信息 Http 请求的种类 Http 请求的种类 GET：通过URL 得到资源 POST：向服务器提交内容 PUT：用于修改某个内容 DELETE：用于删除某个内容 OPTIONS：查看服务器性能 TRACE：远程诊断服务器 Get 与Post 的区别 GET：从服务器取回数据，幂等，也可提交小数据，不超过2k；通过URL，明信片http://127.0.0.1:8080/index.html?name=zhangsan&amp;pwd=123456 POST：向服务器提交数据，提交大数据，打包；将数据放置在请求体一封信 通过Get 方式提交数据（到服务器） Tomcat 服务器搭建学习过JavaEE 的同学，应该很熟悉的，没有学习过也不要紧，通过Google 来搜索也就五分钟就搞定了。 去官网下载加压包（非安装版）； 配置环境变量 使用手机客户端，在输入框输入姓名密码，传到后端服务器并输出： http://192.168.56.1:8081/MyWeb/mail.jsp?name=trt&amp;pwd=123456 写mail.jsp 文件的时候，注意格式，先使用Chrome Dev Tools 测试，返回的请求头和响应头，还有Preview 中是否有数据（第一行），因为response 返回后，使用readLine() 读取数据，如果返回的数据第一行没有数据，则读入的空。 通过Post 方式提交数据（到服务器） Post 和Get 的区别在上面已经说过了，尤其是提交敏感信息（比如用户密码）。一定是要通过Post 来提交服务器的。","categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://tikitoo.github.io/tags/android/"},{"name":"network","slug":"network","permalink":"http://tikitoo.github.io/tags/network/"},{"name":"http","slug":"http","permalink":"http://tikitoo.github.io/tags/http/"}]},{"title":"三石 · 道——聊聊Java（转载）","slug":"three-stone-talking-java","date":"2014-11-10T17:15:27.000Z","updated":"2015-07-01T09:51:56.000Z","comments":true,"path":"2014/11/11/three-stone-talking-java/","link":"","permalink":"http://tikitoo.github.io/2014/11/11/three-stone-talking-java/","excerpt":"","text":"本文转载来自：三石 · 道个人博客转载请注明出处：http://www.molotang.com/articles/51.html 聊聊Java（零） 俗话说，“三句话不离本行”，貌似是出自《官场现形记》原意搞不清楚了，现在通常说的是人的行为总离不开所处的职业范围。这是我的第三篇日志，觉得很有必要聊聊技术。做Java这么久，多少有点想说的，想起啥说啥吧，算是一个总结。 本文主要是对Java开发语言以及Java体系结构学习的一个总结，Java的历史背景和发展，以及和大家分享一些个人学习经历和（我认为的）经典书目。 从开发语言上来看，Java无疑是目前业界的中流砥柱。TIOBE有一个认可度很高的编程语言热门度排行榜，如下是最新(2013)的展示。 从中可以看出，长久以来，C和Java始终保持在第一阵营，可见热门度超高。C++则结合了C的优点和面向对象的思想，成为很多对偏底层或性能上要求较高的首选开发语言。Objective-C在近期一飞冲天，乔布斯( Steve Jobs )功不可没，苹果应用的开发几乎独占了这门语言。PHP就不说了，Zencart、Wordpress等优秀的开源项目都很受青睐，本站就是基于这个的。C#、VB用的少，基本上属于MS阵营，就不多说了。Perl也了解不多。Python是一门抽象度更高，使用更灵活的语言，记得有种说法叫“胶水语言”，她立于此列中。随着Ajax技术的广泛认可，跑在浏览器端的js代码似乎更受到重视，但Javascript绝不仅仅局限在BS系统的前端，MongoDB也是它出没的场所，最近服务端考虑用到的Node.js更是展现了Javascript无穷的生机。 扯远了…… 先回过历史简要看下Java诞生的年代背景吧。通常认为Java诞生于1995年，但事实上在此之前Java的雏形已经酝酿了好久，最初是因为C/C++的一些弱点使用起来让人头疼，安全性是一个考量，于是打算在家用电器等智能物件的通信等方面尝试采用新的语言，但貌似并不算成功，这个当时叫Oak。后来随着互联网的发展（不知道这个要不要感谢一下雅虎和杨致远），Java真正意义上迎来了新的起点，在浏览器上大做文章。 但其实这跟Java如今的应用场景也大为不同，记得大学时一本国人写的《Java程序设计》教材中还提到过applet这个东西（很多老版本的Java开发还会提一些）。没错，早期的Java其实是通过用这个和浏览器一起，搞出一些互动的应用来，但后来……大家都清楚，如今做Java工程师的写applet貌似不多了。 Java诞生于Sun。大家知道Sun（Stanford University Network）这个公司曾经是很风光的，主要做工作站和小型机，在微软要成为霸主的时候，Sun都是大家心目中的挑战者，而Java也是在这个时候产生的，要做跨平台、面向网络，其实也是在动摇微软的垄断。但很不荣幸的是，Sun并没有像众人期待的那样拿下微软，而最终只留下了短暂的春秋（吴军《浪潮之巅》）。然而不幸中的万幸就是，Java如今仍然屹立不倒，受到最大规模程序人员的喜爱，本人也十分喜爱Java。 至于Java为何叫Java，和咖啡又为何有如此情缘，以至于徽标是咖啡杯，class开头要0xCAFEBABE，这些个大家可以去网上广泛收集资料了…… 写到这，发现要说的还有好多，先在标题上加个“（零）”，后事且听下文分解。 聊聊Java（一） 上文大致说明了Java的概况和早期形成，要想进一步了解Java的发展历史，我们有必要知道Java体系结构和Java平台。 其实，单纯讲Java这个词，她可能有很多含义。她可以指Java语言，也可以指Java技术体系或平台等。 总的来讲，通常Java（体系结构）分为四个非常主要的部分：Java语言、Java虚拟机、Java API 和 Java的类文件格式(.class)。Java语言就不用说了；Java虚拟机是实现“Write Once, Run Anywhere”的最强力支持部分，她屏蔽了底层环境的不同，而且实现了垃圾回收和安全等方面的重要机制；API即对应用开发者向上提供的编程接口，可以直接用这些暴露出来的接口进行开发，这个概念落到实际上，就可以理解为你看JavaDoc的时候，包和、类、方法的定义说明；class类文件结构，则是定义了一套完整的类文件规范，能够在不同的虚拟机实现上做到统一，这个class的结构也被Groovy等基于JVM的一些开发技术作为中介广泛使用。 其中，Java虚拟机和API一般被统称为Java平台。而JDK和JRE这类词貌似和这些没有太直接的对应关系，JRE就是Java应用运行的一套环境，而JDK是在此之上增加了开发、调试、监控等工具，这必然又包括JVM。当然也有人把Java语言和平台统一到一起，认为这就是JDK的实际意义。 说道Java平台，就不得不沿着JDK的发展历史再详细说说。可以先说说我知道的一些。 JDK1.0，1996，主要是提供了虚拟机和Applet等技术（上文提过随着互联网兴起的发展背景，这些都和浏览器有关），那时的虚拟机实现主要是纯解释型的。 JDK1.1，1997，像Jar、JDBC、RMI和Reflection这个时候都有了，相信做Java的基本都离不开这些。 JDK1.2，代号PlayGround，1999。这个得好好说说，有个大变化。Java平台被细化为三个大的发展方向，为桌面基本应用、为企业级站点、为移动手持设备分别服务，即为StandardEdition、EnterpriseEdition和MicroEdition，通常说的JavaSE、JavaEE和JavaME，因为是在这个2.0的时候，所以也有称呼方式为J2SE等。对于开发者来说，至少API不同了。这个时候有了JSP，而且我们现在还在用的Hotspot实现(JIT融入)，这时候已经出来了，集合类大家用的也很多吧。 JDK1.3，代号Kestrel，2000。实时、CLDC、MIDP、CDC规范发布。 JDK1.4，代号Merlin，2002 。这个使Java走向成熟。NIO等主要的东西就是在这个时候出现的，WebService也大行其道。 JavaSE5，Project Tiger，2004 。主要是语言易用性的改进，如foreach相关的和@annotation等，还有就是JUC(java.util.concurrent)，这个包里的东西你会看到since 1.5 。 2006年的JavaSE6，更需要关注的是，开源了，还有就是不叫J2xE了，改成JavaxE了。 2011，Java7，此时Java已经进入Oracle的时代了，G1回收机制是一个新点，而且Hotspot和JRockit必然走向统一。 当然更详细的，具体到年的，可以参看Java Timeline 聊聊Java（二） 厄尔尼诺分割了大气流，从大洋彼岸掠过，温暖、潮湿的空气弥漫在整个得克萨斯。他与冷锋气流发生遭遇，在南面的压力下形成了漩涡，并当场锁定了冷空气。暖湿气流冲入冷气团中，相互交汇，产生一个完美的风暴。 这是对Bruce A.Tate在他的《Beyond Java》书中一段描述的翻译。任何风暴都不是偶然，它需要很多因素聚结在一起，而Java就如同这股完美风暴，席卷了世界。 自1995年Java正式向世界发布，到如今已经影响了世界近20年，从技术创新到企业的发展合作模式，也不断地改变着人们的生活。Java成为了第一大开发平台，有着约9百万的开发者，平均每年有10亿下载量，有30亿的设备在运行着Java，占领者97%的企业桌面份额。可以说Java是很成功的，这点从Java语言在TIOBE榜上的情况也可以看得出来。Java的成功是由多方面因素共同造就的，我们就来看看。 一 我们回顾下Java体系结构特点。 通常，在介绍Java的时候都要提到的几个基本特点就是，平台无关性、安全性、网络移动性。其中前面的两者是支持后者的基础和前提。Java的JVM是平台无关性的最根本技术支持，屏蔽了底层环境的不相同。安全性则体现在Java体系结构的各个层面上，class文件格式的规范性和校验机制，JVM类加载器动态加载类时的信任代理机制，Java API中安全管理器的概念和栈中权限检测的机制，还有就是Java语言中对指针的抽象、数组越界异常机制等安全的控制。网络移动性，则与互联网的发展，计算方式的改变等有着密切的关系，可以说是顺应形势。下面的两节会更详细地结合情况说明这些。 ####二 下面，我们详细看下Java在技术上诞生和发展方面的因素。（1）计算方式的改变和互联网的兴起。在PC流行以前，多终端的大型机系统还是主要的计算模式，计算相关的很多资源都是共享的，当需求发展到一定程度，计算资源就到达了一个瓶颈。在PC刚刚开始流行的时候，互联还并不方便，因此各个计算机就如孤岛一般，但不久这个限制最终被互联网打破。自此，Client/Server的计算形式便开始广泛得到了运用。但这还有另外一个问题，就是和如今做C/S所需要注意的问题一样，就是客户端程序不易于管理，可能会存在多版本，服务端必需兼容处理个版本的客户端程序才能保证全局是稳定的。 不知道读者中有多少了解移动互联网或者说无线应用开发的，对于大中型公司的应用，很多有一种需求，叫做插件化——就是说，客户端初始安装只是一个框架，在这个框架体系下，客户端可以通过用户定制来进行可插拔的软件安装和更新，软件本身也成为一个网络传输的内容，而不仅仅是单纯的数据。但据本人了解，目前iOS平台还无法真正意义上地实现这些，我推测原因可能有安全性方面的考虑等。其实除了安全，在各种硬件和操作系统环境中能够实现同样的效果等也不容易，但这些正是Java崭露头角的机会（前文重复过几次，平台无关性、安全性以及网络移动性的特征）。Java在出世的时候，就是以Applet，HotJava等打破了这个僵局，后续的Serialization、RMI、Reflection等对此提供更强有力的支持。 （2）C++和Java。相信大家都看到我的文章“聊聊Java（零）”中TIOBE中，第一阵营中除了Java，还有一个C。C语言是一门很古老的语言，是汇编语言基础层面之上最重要的一门语言，和汇编比起来具有很好的可读性，和VB比起来又很有执行效率，是开发操作系统层面最重要的一门语言，直到如今亦如此。但任何事物都有不完善的方面，比如在当时很受人欢迎的面向对象概念，C就不怎么具备。面向对象可以对应用做更好的设计，并重用代码，这种对事物已有资源的积累，是任何事物向更高更广发展的前提。C++诞生了，在C的基础上融进了OO的理念。C++也算是一门很重要的语言，但很遗憾，她也有着非常脆弱的特点。先不说C先天的缺陷，C++就算是面向对象，也不纯粹，没有做到everything is object，她不指定唯一根（不像Java的java.lang.Object），而且多重继承。这些一方面使得语法更为复杂，出现了虚基类等概念，学习成本更高，而且在类结构上层次容易带来很多困惑，不利于更清晰的设计。回头再看C和C++的一些通病，就是对底层环境依赖强，基本谈不上什么可移植性，对内存操作直接（也有好的一面），野指针可以满天飞，而且没有Java中的垃圾内存回收机制，内存泄露也许是经常发生的事儿。据说在Win下还有一个“DLL问题”，本人用C++在Win下做应用开发的少不太了解，这个就不细说了。 如此种种，使C++的开发者很困惑不爽，早就期待着有Java这样声称有各类有点的语言和平台，而Java确实做到了这些，使众人眼前一亮。 （3）面向对象。前文说C++也提到了一些OO，这里少说点,说点其它的。面向对象的三个基本特征是封装、继承、多态。用OO直接的好处就是可重用性设计，其实OO不仅仅是这些，她使得应用程序的设计更接近自然更为人的思维所接受，也就更利于设计出更好的应用，推动软件开发的发展。早期的OO语言有Simula、SmallTalk等（貌似《设计模式》一书中很多例子都基于SmallTalk）。其中SmallTalk是非常成功的面向对象语言启蒙者，也是单继承，但由于其他因素局限于特定的领域内。可以说，如今的Java、ObjectiveC都从SmallTalk中学到了很多。 （4）再说JVM和API。其实对于Java平台，这两者也提到了很多次。不得不说JVM对于Java的成功非常关键，平台无关性和安全性在这里都做了很多。JVM其实不是一个特定的实现，她有一套完整的规范，允许个厂商合作推出适合特定系统和场景的实现，这是一个很好的合作机制。虽然Sun给出了HotJava和HotSpot，但JRockit等也都是不错的实现。JVM规范给出了class的结构、并粗略地规划了类加载和内存管理以及执行相关的条款，但具体到堆了栈了这种实施，是没有任何硬性要求的，甚至可以使非软件实现而用硬件。JVM相当于给了下面实现者很大的空间，又对用Java语言的开发者一个统一的开发平台。规范设计的相当好，据我所知，Java对于JVM规范的制定改动一直很少，只有几个版本：第一版、第二版和Oracle时代的7。规范相关详细的内容可见http://docs.oracle.com/javase/specs/jvms/se7/html 。对于JVM成功的另一个佐证就是，Groovy、Scala这些后来语言对JVM的应用了。对于API，在第二版之后对各个方向的分工是非常有利于Java的发展的，任何领域发展到一定程度，都会细化分工，明确各自的方向。 三 还有一些是技术本身之外的东西。 作为码农/开发者/程序员/工程师，技术很重要。但技术不意味着整个世界，不是所有事情都仅靠技术就能解决。这个观点很重要。 （1）微软和Java同盟。微软大家都了解，在PC的发展过程中，有一个称谓叫Wintel，就是Intel加Win的OS。微软在软件界可以说是霸主地位，说他是霸主不仅仅因为他干得很大，更重要的是，谁是他的竞争对手，几乎都会很惨……比如网景、Lotus等，当时Win还在图形界面上抄袭了乔帮主的Macintosh，让苹果在PC一度被动。1997年，Sun和MS终于迎来的第一仗，Sun起诉MS在Win下歧视Java（貌似是微软对Win下Java平台相关的东西有改动致使Win下Java程序能用而其他环境的不行）垄断并胜诉。后续的斗争更为激烈，比方说MS抄袭Java搞出了自己的.NET和C#（虽然目前的市场占有应该远不及Java）等。 另一方面，Java的跨平台优势吸引了众多底层的操作系统提供方和企业。早在1996年，10家主要的操作系统提供商就声明引入Java技术，其中微软的各个竞争对手（IBM、Apple等），每年一度的JavaOne大会也开始进行。之前微软以OS垄断使其Windows大举扩张，而目前Java这个跨操作系统的平台似乎弱化了这一点，在MS竞争对手的支持下，Java正不断向前发展。此外，Java声称的安全性对微软Win中被抱怨的种种缺陷也是一大明显优势。 （2）企业支持业界标准。随着Java企业用户的发展和技术上的不断革新，Java从客户端的applet不断走向服务端，1997年有了servlet这个东西（可以理解为server applet），98年又搞出了个EJB1.0 。这促使了IBM这种大企业将Java和企业内部的数据库、消息系统等整合起来，而且在这个过程中Java再一次展现了她在服务器程序开发和整合上的优势，也积累了很多不错的产品。 Java吸引了大批优秀企业用户。像IBM，拥有非常大量的工程师应用Java做各种开发，这些大企业促使了一些基于Java的业界标准，就像秦始皇统一货币度量衡一样，这对Java的进一步统一发展是有着很大的促进作用的。 （3）开源和社区。Java的成功，开源功不可没。正因为开源，更多企业和个人才能更容易的接受和使用Java程序。其实Sun最初是对开源有抵制情绪的，因为微软已经通过垄断赚取了大量利润。开源，这是发展的必然，开源给大家带来的非常丰富的选择，开源也提高了收费的门槛，促使软件提高质量和价值，开源也促进了Java的推广。这里举个可能不很恰当的例子，开源就好比电商领域的淘宝。在淘宝出现以前，传统的百货公司把持着市场，只有有一定资本的人才能在百货大楼中有一席之地，而像北京西单中友百货这种，一件普通的衣服要卖到好几千，这中间的利润到底耗费在了什么环节，进了谁的腰包我们并不清楚。但我们应该清楚的是，这个价格应该在一定程度上讲是虚高的，超出了一件衣服应有的价值。马云貌似说过这样一句话“不是淘宝太便宜，是传统商场太贵”。从经济学的角度上讲，商品的价格应该与价值相关联，一件商品到底有多贵，不是谁来要多少就是多少，而应该探其本身的价值，价值是什么，无差别的社会劳动。 放到开源意义上讲也是一样，微软垄断了操作系统，不开源，而这样的软件或者企业必定会受到开源社区的影响，甚至威胁。就像越来越多的人会使用淘宝而不是去百货大楼买贵的衣服一样。在开源社区，开源的应用会显现其应有的价值，并随着需求不断发展进步，最终得到广大用户的认可，这是开源软件的价值所在。 就算大家可能没有看过Tomcat、Spring等优秀产品的源码，但一定用过并且知道他们的源码是可读的。开源社区创造了这样一个环境，她不但催生出从Jetty这类服务器，netty这类网络通信框架，而且也会产出像Lucene这种搜索引擎和Hadoop分布式计算框架等。另外，这一切的一切，回过头来又进一步促进了Java的发展。 其实，Java的发展成功因素也许不仅这些，但历经近二十年，Java依然是开发平台中的中流砥柱。 聊聊Java（三） 前面“聊聊Java”已经聊了三篇了，争取用这篇对这个系列做个小结。 这篇主要对Java的展望、个人经验的简要小结和一些值得推荐的资源。 说到对Java发展的展望，就不得不提到JCP。 Sun在1995年公开了Java这样一个技术，在三年后也就是1998年，Sun又创建了一个开放的社区组织JCP（Java Community Process，翻译过来大概是Java社区进程），让关心Java的人都可以来参与Java特征和新版本规范的制定，而非让Java只有Sun一家把控。与JCP相关的一个概念JSR，Java Specification Request，是一个以特定格式详细描述需求的规范文档。JSR可以由一个JCP成员发起，经过多个状态。JCP最后产出三个东西——规范Specification、参考实现Reference Implemention、技术兼容包Technology Compatibility Kit。 2010年，Oracle收购了Sun，加大了其对Java的影响。在展望Java未来前，我们再来回顾下Oracle时代的Java7。 2011年，Java 7发布。在Java7中主要做了以下几件事情：提供了异步IO，提供了新的文件系统API，增强了对非Java语言的支持，用了G1垃圾收集，还有就是Java语言语法易用性上的改进。 有关Java7更详细的说明请参见：http://www.oracle.com/technetwork/java/javase/jdk7-relnotes-418459.html 下面对Java的未来做一些展望 。时代在不断的变迁，需求也不断的更新，人们对Java的期待实在太多，Sun被收购，Java7的发布拖后，JCP的效率低下也被人所诟病。未来的Java需要解决的问题很多，说说主要的几个。 服务模块化，OSGi则一直是工程师的首选，对于未来Java来说模块化是很重要的需求。Jigsaw在路上。对于高级开发语言来讲，闭包是很有价值的部分，因此Lambda也是大家对Java的一个期待。Java语言的易用性和Java的高性能一直都是Java人所追求的，这点在未来的Java中也一样会受到关注。很多非Java语言和技术的使用以及他们和Java的结合应该受到关注，Groovy、Scala、Jruby。Javascript也在各种应用场景也在发挥着新的作用，将这些和Java整合也是Java很重要的发展点。此外，如今已是云计算时代和大数据时代，如何适应这个变化发展的背景环境，也是Java发展所需要考虑的。接下来，Java8会发布，对Java8感兴趣的，可以看下这个。 http://www.jcp.org/en/jsr/detail?id=337 对Java，本人也还在学习和认知理解的阶段，可以算得上是菜鸟一个，在应用实践中略有一些感想，小结一下。一来有助于自己回头复习的时候有个参照，二来也希望真的对同在学习Java的人有那么一点点帮助。 作为一个接触Java0-3年的人，对Java语言的学习运用依然是很重要，这是接触Java的第一个阶段。Java到目前已经发展了18年，为了满足各个方面的需求，不断增加新的东西，这对于学习Java的人还是有一些成本的。其中涉及面向对象概念的理解，这需要一个过程，最初是对规则比较死和硬的认知和记忆，而后逐步过度到理解和融入自己的思维方式，去实践去设计。面向对象这块，主要的语法体现，就是继承、封装、多态，具体到Java就是extends/implements，public/protected/default/private和overload和override。除此之外的语法涉及面也比较广，主要包括容器、泛型、IO和多线程并发相关的内容等，细节就不一一说明了。在这块《Thinking in Java》是非常经典的学习资料，本书的作者也是《Thinking in C++》的作者，Bruce Eckel，至少本人觉得值得反复读反复学习，从中学到的不只是语法使用上的东西。 在此基础上，还要对Java的体系结构和IDE有认知了解。IDE不用多说，Eclipse是非常好的开发环境，用起来非常舒服，插件化支持非常好，有必要熟练掌握其使用。Java体系结构的话，API实际上和上面所说的是相关联的，要能熟悉JavaDoc中所描述的才好。必要的时候去查文档，文档要看官方的，http://docs.oracle.com/javase/7/docs/api/ ，除非有把握或者真的值得相信，论坛的东西是不会比官方文档更靠谱的。除了Java language和API，了解class文件的大致结构是有必要的，比如至少知道0xCAFEBABE这是个什么东西。其实，说起对Java体系结构有了解，JVM是这其中最需要了解，也值得深入挖掘的东西。前文说过，JCP制定的只是一个规范，虚拟机也是一样，她允许不同的实现。对于规范，可参见这里http://docs.oracle.com/javase/specs/jvms/se7/html/ 。还有一本书个人觉得也不错，《Inside the Java Virtual Machine》,不过这本书年代比较久远，有些东西可以说是过时了，而且这本书估计是买不到了，可以参看这里http://www.artima.com/insidejvm/blurb.html 。提JVM规范可能扯得有点远，作为工程师，其实能对JVM的配置和调优有所掌握是有必要的，运行程序要知道自己运行在什么情况的环境下，在这点上，周志明的《深入理解Java虚拟机》还算不错，可以读一读。这里说了好多JVM，我觉得学习JVM，至少需要了解她是如何进行类加载的、如果进行垃圾对象回收的，比如Hotspot就分了新生代和老生代，在不同区域用不同的算法进行回收。了解JVM怎么保证安全其实也有必要，这里就不多说了。想更多了解JVM的规范和实现的，可以看这里，昨天刚刚看到前淘宝网同事莫枢的分享，非常不错：http://book.douban.com/doulist/2545443/ 。 到这里，其实已经有了前面两者的基础，就可以做很多事情了。前面的文章里我提过，不是所有问题都是仅靠技术就能解决的。作为工程师，除了掌握这些技术基础外，更多的是去实践，在具体的业务场景下解决具体的问题。目前来看，很多情况我们应用Java解决问题，需要了解Servlet这个东西。我最初是在学校里的一门课程了解到，当时的教材叫《J2EE程序设计》，不是很推荐。后来倒是看过一本叫《Head First Servlets and JSP》,评论这本书，我觉得可以说“很生动”，呵呵。和Servlet相关的，至少要知道Tomcat是什么东西，Jetty和Tomcat又是啥关系，可以看看《Tomcat:The Definitive Guide》，OReilly出品。 之后，随着业务需求复杂化了，应用的工具和框架了，可能就不止这些，Ant、Maven、Spring、Struts、Hibernate、Ibatis、Freemarker/Velocity。对于这些，更多的是了解文档，会配置会应用。当然，我觉得对于优秀的开源产品，源码是一个很好的学习资源。当然这需要时间和精力，具备一定理论基础和搭建好一个合适的调试环境在这个过程中都很重要。本人粗略读过SpringIOC部分和Tomcat的部分源码，了解Tomcat可以看早期版本相关的一本书《How Tomcat Works》，但Tomcat的源码有些复杂，可能去看Jetty是更好的选择。读源码的目的一方面是作为基础语法和实践不足的补充，另一方面可以看看一个好的开源的产品是怎么设计架构的。 对于企业级的开发，其实还有一些几乎是必须要学习的。分布式应用的开发离不开高性能的网络通信，基于服务的架构（SOA）几乎是必然用到的。这就有必要知道Java的RMI和序列化的作用，BIO和NIO的不同，netty是啥东东，传统的基于XML的WebService还有一些如Hessian的技术也都是有必要熟悉下的，也要知道ActiveMQ是干嘛的怎么用。 这方面有本书可以看下，淘宝网的林昊《分布式Java应用：基础与实践》，虽然书中直接具体讲分布式的内容比例并不算大，但读读还是有收获的。 上面说来说去都是紧密和Java相关的，其实在很多场景下，Java不是万能的，相关的技术也要有所学习有所了解才能更好的和Java结合起来解决问题。比如Mysql是很好的数据库，提供了丰富的存储引擎，采用何种更合适。Java是一个平台，那平台之下的OS如何和JVM交互并支持着JVM等。还有就是JVM如何去调优，是否有可能对JVM了解后做一些适合特定业务场景的改进。扯远了…… 除了上面提到的，还有很多不错的书目值得推荐，比如《Core Java》（分卷一、卷二）等，更多的还请大家多多探索和沟通。 此外，我还想说一句的是，这个世界上很少有什么东西能更无限长久地生存下去，技术也是一样。Java已经走过了近20年的风风雨雨，这是十分难得的。早在Java诞生后的第十个年头，2005，Bruce A.Tate就著有《Beyond Java》, 里面分析了Java从诞生到发展的过程，也指出了Java的危机和将来有可能会超越Java甚至替代Java地位的语言或技术。虽然里面的提到很多危机并没有影响到Java的实际发展，或者被Java解决掉了，或者不是什么危机。但随着Java的成长，我们在看到其成功的优势背后还仍然存在很多问题。我们有必要关注Java的发展动向，有必要关注新技术的成长。 到这，这篇文章写的已经不短了，“聊聊Java”就聊到此为止吧。这些内容都是本人想到哪写到哪，多而杂，有描述不对的地方，还希望指出，共同讨论共同进步，谢谢！ 聊聊Java（零）聊聊Java（一）聊聊Java（二）聊聊Java（三）","categories":[],"tags":[{"name":"转载","slug":"转载","permalink":"http://tikitoo.github.io/tags/转载/"},{"name":"java","slug":"java","permalink":"http://tikitoo.github.io/tags/java/"}]},{"title":"Genymotion 启动问题，显示 unable to start the genymotion virtual device","slug":"genymotion-unable-to-start-the-genymotion-virtual-device","date":"2014-11-08T05:35:16.000Z","updated":"2015-07-11T05:38:40.000Z","comments":true,"path":"2014/11/08/genymotion-unable-to-start-the-genymotion-virtual-device/","link":"","permalink":"http://tikitoo.github.io/2014/11/08/genymotion-unable-to-start-the-genymotion-virtual-device/","excerpt":"","text":"启动Genymotion 显示 unable to start the genymotion virtual device。 解决办法： http://stackoverflow.com/questions/19922077/genymotion-unable-to-start-the-genymotion-virtual-device 首先去VirtualBox 中查看系统设置中所选择的 网络 是否打开，并看网络服务器的IP 配置；然后去查看虚拟机的各项设置，比如内存是不是太大，或者是显存是不是太小，确认无误后，方可启动；","categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://tikitoo.github.io/tags/android/"},{"name":"tools","slug":"tools","permalink":"http://tikitoo.github.io/tags/tools/"},{"name":"genymotion","slug":"genymotion","permalink":"http://tikitoo.github.io/tags/genymotion/"}]},{"title":"我是如何自学Android，资料分享","slug":"how-do-i-self-study-android","date":"2014-10-27T14:15:00.000Z","updated":"2015-07-01T09:04:34.000Z","comments":true,"path":"2014/10/27/how-do-i-self-study-android/","link":"","permalink":"http://tikitoo.github.io/2014/10/27/how-do-i-self-study-android/","excerpt":"","text":"我是如何自学Android，资料分享（2015 版） 已经完成，我的建议是先把这一篇看完，再看2015 版的，欢迎喜欢，收藏。 最近知乎上有网友问我怎么自学Android，其实说实在的，我学的也一塌糊涂，当然在学习过程也积累了一些知识，对于以前没接触过Android的朋友，或者刚入门Android 的朋友，这篇文章作为入门，那是再合适不过了，希望对刚入门Android的朋友有帮助，接下来，就不罗嗦啦。 本文主要有以下几个步骤：1. Java 基础；2. 搭建Android 开发环境；3. 了解Android 运行原理以及一个工程项目结构；4. 如何系统学习Android；5. 推荐一些实用的资源6. 总结 首先呢？当然要有Java 基础； 我大学的专业就是Java，但由于没学好，刚开始学Android 的时候，挺吃力的，后来又去补Java 基础去了；因为Android SDK 是基于Java 开发的，使用的语言是Java，如果有了Java 基础，学Android 就会事半功倍；比如在Android 中要使用到的接口，抽象类，类型转换，继承，覆盖，匿名内部类，多线程，这些都是Java 语言的，如果以前没有基础过，学Android 会很郁闷的； 当然如果你有C++ 基础，当然也可以基于NDK 开发，可以不使用Java； 对于没有Java 基础的朋友，我推荐一些资料： Mars 的Java4Android：http://yun.baidu.com/s/1dD5RRQ5极客学院推出的Android 专题：http://android.jikexueyuan.com/ 搭建环境 Android 开发IDE选择，有Eclipse，IntelliJ IDEA，Android Studio（基于IntelliJ IDEA 社区版开发的），Eclipse 和 Android Studio 是免费的；对于初学者我推荐使用Eclipse，因为Eclipse 成熟，遇到问题，搜索也容易找到答案；以后可以尝试不同的IDE； 搭建环境的步骤：* Eclipse安装； Android SDK安装（Android 开发工具包）； ADT安装（Eclipse 的插件，使Eclipse 能够开发Android）； 创建AVD（在电脑创建一个虚拟手机）； 详细步骤：Android开发之旅：环境搭建及HelloWorld 在这里会有很多工具，可能刚入门的会比较模糊，可以参考：Android 开发，各种工具 如果最终虚拟的手机屏幕能够显示主界面，则表示成功； 了解Android 运行原理，一个工程的项目结构 项目结构推荐慕课网的视频教程：Android 项目结构介绍 Android项目目录结构介绍 Android开发之旅：HelloWorld项目的目录结构 系统学习Android 有了上面的学习，对Android 也有了初步的认识，接下来可以系统地学习Android 啦，网上资料也很多啦，书籍也很多，视频也很多，我觉得首先要《官方API Guide》；然后手上准备一本书，可以当做字典，不会可以看看；如果看官方文档，有难度，看书进度太慢，可以看视频，跟着视频学，做一下东西，有什么不会的问题，可以Google 搜索； 如果说到细的知识点，比如四大组件，UI，多媒体处理，信号连接，数据存储，我在这里就不多介绍了；主要介绍了一些学习资料； 官方文档 官方指南：Introduction to Android | Android Developers Android API：Android API| Android Developers 官方中文文档： 序言 | Google Android官方培训课程中文版(v0.5) 书推荐 《Head first Android Developer》； 《Pro Android》； 视频教程 Mars——Android 开发视频教程 黎活明——8天快速掌握Android视频 慕课网——Android 开发视频 极客学院——Android开发,安卓开发教程,android教程,安卓软件开发教程,安卓开发视频教程,安卓开发环境搭建 博客推荐 android开发大牛博客 hellogv的专栏 - 博客频道 Android_Tutor的专栏 - 博客频道 Storm’ blog 恺风（Wei）之Android专栏 老罗的Android之旅 - 博客频道 网站推荐 ImportNew - 专注Java &amp; Android 技术分享 Android - 博客 - 伯乐在线 Android开发中文站关注Android，关注开发者 总结 当然Github 上有很多开源的项目，多看看源码，自己才能快速提升；《Android开源项目分类汇总》，这里几乎汇总了github 上所有的开源项目，可以自己找些慢慢学； 然而学习是乏味的事，坚持到最后是不易的； 要善于利用搜索引擎，遇到不会的问题，要使用Google 搜索；对了，作为一个开发者，要学会自备梯子； 还有学Android，要时刻关注Android 的最新动态，比如最新发布的Android 5.0 棒棒糖版，去了解他的新特性； 加一些QQ 群，有不会可以问问，相互交流； 本文作者：Tikitoo本文出处：http://www.jianshu.com/p/2ee0e74abbdf转载请在开头注明作者详细信息和本文出处。","categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://tikitoo.github.io/tags/android/"},{"name":"tutorial","slug":"tutorial","permalink":"http://tikitoo.github.io/tags/tutorial/"}]},{"title":"Android 学习之路（转载）","slug":"learn-android-from-rookie","date":"2014-10-27T11:13:29.000Z","updated":"2015-07-01T09:06:18.000Z","comments":true,"path":"2014/10/27/learn-android-from-rookie/","link":"","permalink":"http://tikitoo.github.io/2014/10/27/learn-android-from-rookie/","excerpt":"","text":"本文作者：Stormzhang转载来自：http://stormzhang.github.io/android/2014/07/07/learn-android-from-rookie/ QQ交流群：383323653 (入群理由填写我的GitHub账号(stormzhang))收到一些朋友的微博私信，说能不能给Android新手们一些指导，我只能说指导谈不上，毕竟我也很多东西正在学习中，与此同时一大学同学准备转行Android，可以说是从头开始，那么我就姑且以一个过来人的身份给一些建议吧，只希望在学习的过程中能够少走写弯路吧。 硬件 电脑–推荐Mac首先声明我不是果粉，个人Windows，Linux，Mac OX系统均用过， 只能说Windows上面的开发工具简直难以恭维，尤其命令行超级难用，而Linux自己必须得花不少时间在折腾中，更是不适合新手了，Max OS是我认为迄今为止最好用的系统，没有之一， 所以如果你不差钱的话，强烈建议入手一台Mac，推荐Pro系列， 当然它的价格确实比较昂贵，如果暂时入手有困难，推荐以后手头宽裕的时候再入手吧，会带给你质的体验。(Google的工程师们都在用Mac，应该比较有说服力吧) 手机–推荐Nexus 5做Android开发最难以忍受的就是那龟速的模拟器，强烈推荐入手我Google的Nexus系列，原生rom，性价比超高，有条件的推荐再入手一台小米或三星之类的，不是因为他们有多好用，而是因为目前市场上这两个品牌的手机份额最大，实际开发中可能需要进行适配与测试，总之你需要有台Android手机。你可能还需要知道魅族手机有个SmartBar的东东，虽然我认为确实很SB。最后你实在还是要用模拟器的话，那么姑且就给你推荐一款比较快速的模拟器吧—-Genymotion, 具体的见我这篇博客《一个强大的Android模拟器Genymotion》。 开发环境 Eclipse ADTGoogle帮你集成了一个完整的Android开发环境，包含一个定制的Eclipse + ADT plugin，以及最新的SDK及源码 IntelliJ IDEA相比与Eclipse更推荐使用IDEA，以后可以无缝过渡到Android Studio Android Studio首先说明这个不适合新手们使用，但是你必须知道这是Google最新推出的Android开发工具，基于IDEA，编译依赖Gradle，目前还没有推出1.0的正式版，但是你依然可以业余项目熟悉了解下，因为这也许是Android开发工具的未来 翻墙俗话说，不会翻墙的程序员不是好程序员，尤其最近Google各项服务被屏蔽，以上IDE的下载也就都需要翻墙，这里推荐一个靠谱的VPN吧，支持多设备MAC，Windows，Android，iPhone等，如果和小伙伴们一起合买的话每月只要几块钱，圈内的朋友们都在用，如果你通过下面链接购买的话，你和我的账户都会增加10元钱。云梯VPN ###如果无论如何你都不想翻墙的话，这里github上可以直接下载以上Android开发工具 AndroidDevTools Google Android官方教程 Android Training Course in Chinese Android基础 上面可能是一个比较全面系统的培训教程，对于新手们可能对某些需要着重掌握的东西比较迷茫，于是整理下个人认为新手们必须要掌握的知识点，顺便也会附带相应觉得不错的讲解博客地址。 两分钟彻底让你明白Android Activity生命周期(图文)!Activity实际开发中使用频率最高，这个必须要理解 Android四大基本组件介绍与生命周期Android中的四大组件必须得知道，也是面试常问到的 ListView的基本使用与优化ListView是所有控件中最常使用且对新手来说比较复杂的用法，各种Adapter的使用以及ListView的优化都是必须掌握的 Android系统用于Activity的标准IntentIntent解决了Android中四大组件的通讯，非常有用，这篇博客收集整理了系统的标准Intent Android 屏幕适配介绍一些Android屏幕适配的基础 Android中SQLite应用详解Android中的SQLite需要掌握，这篇博客很适合新手 Android Fragment完全解析3.0之后新加的Fragment，必须要掌握，目前使用的场景也是越来越普遍了 Android中级 Android应用程序的生命周期Android的应用程序的生命周期需要理解，面试也是经常会被问的 带你一步步深入了解ViewView做为UI开发中最常用到的，必须要深入理解 Android Service完全解析Service作为Android四大组件之一，在每一个应用程序中都扮演着非常重要的角色 Android Gson目前比较常用比较流行的数据格式就是json了，这篇博客教你如何使用Google Gson库来进行json解析 Android 布局优化Android开发中经常会用到xml布局，那么布局优化方面的知识更是需要掌握的了 Android中Intent传递对象的两种方法(Serializable,Parcelable)详细讲解了Android中Intent中如何传递对象 Android异步消息处理机制完全解析Android开发中异步操作是经常使用的，必须理解掌握 Android AsyncTask完全解析Android异步操作的另一种方法 Android Custom Loading很早的一个小demo，教你如果做一个App的Loading动画 Android进阶 Android GradleGoogle官方Android新的构建系统，可以很方便的管理依赖、编译打包等 Android 性能优化一系列的性能调优教程，让你的代码以及App更畅通！ 一个完整的开源项目–9GAG一个开源客户端，教你使用Studio、Gradle以及一些流行的开源库快速开发一个不错的Android客户端 整理的Android开发资源自己整理的一些Android开发资源，包括开发、工具、设计等，相信会对你有用的 Android设计 在开发一款Android App之前，你需要了解下Android平台的设计规范，这里有一系列关于Android Design的讲解以及Google最新推出的Material Design中文翻译版 Android Design Material Design Android兼容库 在了解了设计规范准备着手开发你的App时，你还需要考虑你的App支持的版本，如果是全新的App，从目前的市场份额来看，建议直接支持4.0+，虽然2.3的份额仍然有一部分，但是这部分真正用来使用App的人又能有多少呢。当然如果你的公司必须要求支持2.x的版本，那么也不用担心，下面整理了几个满足你适配的一些兼容库: ActionBarSherlock大神JakeWharton的一个ActionBar的兼容库，支持在2.x版本使用ActionBar ActionBar Compact在这之前使用ActionBar基本都会使用上述JakeWharton的兼容库，但是目前Google有了自己的一套ActionBar兼容库，推荐使用ActionBar Compact，具体介绍及使用方法详见我的这篇博客 NineOldAndroidsAndroid 3.0之前开放的一些新的动画api–Property Animation，大神JakeWharton的又一大作，可以让你在2.x版本的sdk可以使用属性动画. Android Support V4如果需要兼容2.x的版本，在使用如下类的时候你需要使用v4包下的，如Fragment, FragmentManager, FragmentActivity, FragmentPagerAdapter, CursorLoader, LoaderManager, AsyncTaskLoader，当然v4包下面除了以上还有一些新的控件你必须知道 Navigation Drawer(导航抽屉)在这之前在Android上实现一个抽屉导航你可能会用到SlidingMenu开源库，如今你可以使用官方的DrawerLayout控件很容易实现 SlidingPaneLayoutSlidingPaneLayout是V4包中新添加的组件，可以实现两列面板的切换, 具体使用与效果见博客链接 SwipeRefreshLayoutSwipeRefreshLayout是Google在support v4 19.1版本的library更新的一个下拉刷新组件,使用起来很方便,可以很方便的实现Google Now的效果 Android开发必知的一些开源库 说到开源库就不得不提GitHub，只能说是目前最活跃的开源社区，不知道的赶紧去注册个账号使用起来，绝对是你快速提升技术的利器。 VolleyApp开发中免不了要和服务端进行交互，而volley是Google官方推出的一个开源的网络通信库，它能使网络通信更简单，更快速。 Volley完全解析 Android volley sample ActiveAndroidActiveAndroid算是一个轻量级的ORM(对象关系映射(Object Relation Mapping))框架，简单地通过如save()和delete()等方法来做到增删改查等操作。 ActiveAndroid–Android轻量级ORM框架 RetrofitRetrofit和Java领域的ORM概念类似， ORM把结构化数据转换为Java对象，而Retrofit 把REST API返回的数据转化为Java对象方便操作。同时还封装了网络代码的调用。 Retrofit – Java(Android) 的REST 接口封装类库 Android-Universal-Image-LoaderAndroid-Universal-Image-Loader是一个强大的开源图片异步加载库，该项目的目的是提供一个可重复使用的仪器为异步图像加载，缓存和显示。 Android-Universal-Image-Loader Android开源项目分类汇总 非常全面的GitHub开源项目汇总，不需要重复发明轮子，尽情遨游在开源世界里吧 关于作者 非科班转投编程，Android开发者，Google脑残粉，热爱开源，分享Android方面的知识、技术、见闻 Weibo: googdev GitHub: stormzhang Company &amp; App: 薄荷 Android微信公众账号推荐大家关注我的微信公众账号AndroidDeveloper, 专注Android技术分享，保证绝对干货！","categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://tikitoo.github.io/tags/android/"},{"name":"转载","slug":"转载","permalink":"http://tikitoo.github.io/tags/转载/"}]}]}